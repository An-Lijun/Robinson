import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.80c893c1.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.debounce.md","filePath":"etc/doc/robinson.debounce.md"}'),l={name:"etc/doc/robinson.debounce.md"},p=o(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.debounce.html">debounce</a></p><h2 id="debounce-function" tabindex="-1">debounce() function <a class="header-anchor" href="#debounce-function" aria-label="Permalink to &quot;debounce() function&quot;">​</a></h2><p>参数1 回调 参数2 延迟时间 参数3 第一次是否立即执行</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">delay</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isLimmediate</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">debounce</span><span style="color:#000000;">(</span><span style="color:#795E26;">fn</span><span style="color:#000000;">: </span><span style="color:#267F99;">Function</span><span style="color:#000000;">, </span><span style="color:#001080;">delay</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">, </span><span style="color:#001080;">isLimmediate</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">): {</span></span>
<span class="line"><span style="color:#000000;">    (...</span><span style="color:#001080;">args</span><span style="color:#000000;">: </span><span style="color:#267F99;">any</span><span style="color:#000000;">): </span><span style="color:#267F99;">Promise</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">unknown</span><span style="color:#000000;">&gt;;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">cancel</span><span style="color:#000000;">(): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>fn</td><td>Function</td><td></td></tr><tr><td>delay</td><td>number</td><td></td></tr><tr><td>isLimmediate</td><td>boolean</td><td><em>(Optional)</em></td></tr></tbody></table><p><strong>Returns:</strong></p><p>{ (...args: any): Promise&lt;unknown&gt;; cancel(): void; }</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     a:[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cloneDat </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(data);</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">data</span><span style="color:#000000;"> ={</span></span>
<span class="line"><span style="color:#000000;">     </span><span style="color:#001080;">a:</span><span style="color:#000000;">[</span><span style="color:#098658;">1</span><span style="color:#000000;">,</span><span style="color:#098658;">2</span><span style="color:#000000;">]</span></span>
<span class="line"><span style="color:#000000;">   }</span></span>
<span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">cloneDat</span><span style="color:#000000;"> =</span><span style="color:#795E26;">deepClone</span><span style="color:#000000;">(</span><span style="color:#001080;">data</span><span style="color:#000000;">);</span></span></code></pre></div>`,11),e=[p];function t(c,r,y,i,E,d){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{u as __pageData,h as default};
