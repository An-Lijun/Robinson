import{_ as o,o as e,c as l,Q as r}from"./chunks/framework.a333c6fb.js";const a="/Robinson/assets/rollup.7e1c45d2.png",m=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"etc/rollup/src/introduce.md","filePath":"etc/rollup/src/introduce.md","lastUpdated":1738049586000}'),t={name:"etc/rollup/src/introduce.md"},c=r('<p><img src="'+a+'" alt="image.png"></p><h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><h2 id="什么是rollup" tabindex="-1">什么是Rollup <a class="header-anchor" href="#什么是rollup" aria-label="Permalink to &quot;什么是Rollup&quot;">​</a></h2><p>Rollup 是一个 JavaScript 模块打包器，它可以将多个小的 JavaScript 模块打包成一个大的模块，用于在浏览器或者 Node.js 环境中使用。它的主要目标是尽可能高效地构建 JavaScript 库。</p><h2 id="webpack与rollup的区别" tabindex="-1">webpack与rollup的区别 <a class="header-anchor" href="#webpack与rollup的区别" aria-label="Permalink to &quot;webpack与rollup的区别&quot;">​</a></h2><p>与<code>Webpack</code>偏向于应用打包的定位不同，<code>rollup.js</code>更专注于<code>Javascript</code>类库打包。 我们熟知的<code>Vue</code>、<code>React</code>等诸多知名框架或类库都是通过<code>rollup.js</code>进行打包的。所以说学习rollup不是一件重复的类库学习,不仅可以学习怎么搭建自己的函数/组件库,也可能更好的学会<a href="https://cn.vitejs.dev/guide/" target="_blank" rel="noreferrer">vite</a>可见学好这一个库能达到一箭双雕的目的。</p><h2 id="rollup的优点" tabindex="-1">rollup的优点 <a class="header-anchor" href="#rollup的优点" aria-label="Permalink to &quot;rollup的优点&quot;">​</a></h2><ol><li><strong>Tree Shaking</strong>：Rollup 通过静态分析代码，自动移除未使用的代码（dead code），从而生成更小的打包文件。</li><li><strong>ES Module 支持</strong>：Rollup 默认支持 ES Module 语法，能够将多个 ES Module 打包成一个文件。</li><li><strong>代码分割</strong>：Rollup 支持代码分割，允许将代码拆分成多个 chunk，按需加载。</li><li><strong>插件系统</strong>：Rollup 拥有丰富的插件生态系统，可以通过插件扩展其功能，如处理 CSS、TypeScript 等。</li><li><strong>输出格式多样</strong>：Rollup 支持多种输出格式，包括 ES Module、CommonJS、UMD 等，适用于不同的使用场景。</li><li><strong>高性能</strong>：Rollup 的打包速度较快，尤其是在处理大型项目时，性能表现优异。</li></ol>',8),p=[c];function i(s,n,d,u,h,_){return e(),l("div",null,p)}const S=o(t,[["render",i]]);export{m as __pageData,S as default};
