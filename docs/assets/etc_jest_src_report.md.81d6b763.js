import{_ as s,o as a,c as e,Q as l}from"./chunks/framework.a333c6fb.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/jest/src/report.md","filePath":"etc/jest/src/report.md","lastUpdated":1738049586000}'),n={name:"etc/jest/src/report.md"},o=l(`<h2 id="九、测试覆盖率" tabindex="-1">九、测试覆盖率 <a class="header-anchor" href="#九、测试覆盖率" aria-label="Permalink to &quot;九、测试覆盖率&quot;">​</a></h2><h3 id="_9-1-测试覆盖率的概念与意义" tabindex="-1">9.1 测试覆盖率的概念与意义 <a class="header-anchor" href="#_9-1-测试覆盖率的概念与意义" aria-label="Permalink to &quot;9.1 测试覆盖率的概念与意义&quot;">​</a></h3><p>测试覆盖率是指测试代码对被测试代码的覆盖程度，它是衡量测试质量的一个重要指标。较高的测试覆盖率意味着更多的代码被测试到，从而降低了代码中存在未被发现的缺陷的风险。通过分析测试覆盖率报告，开发者可以了解哪些代码没有被充分测试，进而针对性地编写测试用例，提高测试的全面性和有效性。</p><h3 id="_9-2-jest-的测试覆盖率工具" tabindex="-1">9.2 Jest 的测试覆盖率工具 <a class="header-anchor" href="#_9-2-jest-的测试覆盖率工具" aria-label="Permalink to &quot;9.2 Jest 的测试覆盖率工具&quot;">​</a></h3><p>Jest 内置了测试覆盖率工具，通过--coverage参数可以生成测试覆盖率报告。在运行测试时，添加--coverage参数：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--coverage</span></span>
<span class="line"><span style="color:#6A737D;"># 或者</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--coverage</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">npm</span><span style="color:#000000;"> </span><span style="color:#A31515;">test</span><span style="color:#000000;"> </span><span style="color:#0000FF;">--</span><span style="color:#000000;"> </span><span style="color:#0000FF;">--coverage</span></span>
<span class="line"><span style="color:#008000;"># 或者</span></span>
<span class="line"><span style="color:#795E26;">yarn</span><span style="color:#000000;"> </span><span style="color:#A31515;">test</span><span style="color:#000000;"> </span><span style="color:#0000FF;">--</span><span style="color:#000000;"> </span><span style="color:#0000FF;">--coverage</span></span></code></pre></div><p>Jest 会在项目根目录下生成一个coverage目录，其中包含详细的测试覆盖率报告，包括 HTML 格式和文本格式的报告。</p><h3 id="_9-3-覆盖率报告解读" tabindex="-1">9.3 覆盖率报告解读 <a class="header-anchor" href="#_9-3-覆盖率报告解读" aria-label="Permalink to &quot;9.3 覆盖率报告解读&quot;">​</a></h3><ul><li><strong>语句覆盖率</strong>：表示被执行的语句占总语句数的比例。</li></ul><ul><li><strong>分支覆盖率</strong>：表示被执行的分支（如if-else语句、switch语句等）占总分支数的比例。</li></ul><ul><li><strong>函数覆盖率</strong>：表示被调用的函数占总函数数的比例。</li></ul><ul><li><strong>行覆盖率</strong>：表示被执行的代码行占总行数的比例。</li></ul><h3 id="_9-4-提高测试覆盖率的方法" tabindex="-1">9.4 提高测试覆盖率的方法 <a class="header-anchor" href="#_9-4-提高测试覆盖率的方法" aria-label="Permalink to &quot;9.4 提高测试覆盖率的方法&quot;">​</a></h3><ul><li><strong>补充测试用例</strong>：根据覆盖率报告，找出未被覆盖的代码部分，编写相应的测试用例。</li></ul><ul><li><strong>优化测试策略</strong>：合理设计测试用例，确保覆盖各种可能的输入和场景，避免测试用例的重复和冗余。</li></ul><ul><li><strong>使用条件覆盖</strong>：对于复杂的条件语句，使用条件覆盖策略，确保每个条件分支都被测试到。</li></ul>`,16),t=[o];function r(p,c,i,d,h,_){return a(),e("div",null,t)}const g=s(n,[["render",r]]);export{y as __pageData,g as default};
