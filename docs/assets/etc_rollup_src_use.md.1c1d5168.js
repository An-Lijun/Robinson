import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a333c6fb.js";const d=JSON.parse('{"title":"使用缓存","description":"","frontmatter":{},"headers":[],"relativePath":"etc/rollup/src/use.md","filePath":"etc/rollup/src/use.md","lastUpdated":1738049586000}'),p={name:"etc/rollup/src/use.md"},o=l(`<h1 id="使用缓存" tabindex="-1">使用缓存 <a class="header-anchor" href="#使用缓存" aria-label="Permalink to &quot;使用缓存&quot;">​</a></h1><p>缓存可以显著提高构建速度，特别是在开发环境中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { rollup } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 启用缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outputOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bundle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollup</span><span style="color:#E1E4E8;">(inputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(outputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">rollup</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">inputOptions</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">cache:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#008000;">// 启用缓存</span></span>
<span class="line"><span style="color:#000000;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">outputOptions</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">async</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">build</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">bundle</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">rollup</span><span style="color:#000000;">(</span><span style="color:#001080;">inputOptions</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#001080;">bundle</span><span style="color:#000000;">.</span><span style="color:#795E26;">write</span><span style="color:#000000;">(</span><span style="color:#001080;">outputOptions</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">build</span><span style="color:#000000;">();</span></span></code></pre></div><p>Rollup 的缓存机制是指在构建过程中，Rollup 会将模块的解析结果（如依赖关系）和转换结果（如通过插件处理后的代码）存储在内存中。这样，在后续的构建过程中，如果模块没有发生变化，Rollup 可以直接使用缓存中的结果，而不需要重新解析和转换模块。</p><h3 id="缓存的作用" tabindex="-1">缓存的作用 <a class="header-anchor" href="#缓存的作用" aria-label="Permalink to &quot;缓存的作用&quot;">​</a></h3><ol><li><strong>提高构建速度</strong>：缓存可以显著减少重复的解析和转换工作，特别是在大型项目中，构建速度的提升会非常明显。</li><li><strong>减少资源消耗</strong>：由于缓存减少了重复工作，因此也减少了 CPU 和内存的消耗。</li></ol><h3 id="缓存的局限性" tabindex="-1">缓存的局限性 <a class="header-anchor" href="#缓存的局限性" aria-label="Permalink to &quot;缓存的局限性&quot;">​</a></h3><ol><li><strong>内存占用</strong>：缓存存储在内存中，因此在构建大型项目时，可能会占用较多的内存。</li><li><strong>缓存失效</strong>：如果模块发生了变化（如文件内容修改），Rollup 会自动使缓存失效，并重新解析和转换该模块。</li></ol><h3 id="手动管理缓存" tabindex="-1">手动管理缓存 <a class="header-anchor" href="#手动管理缓存" aria-label="Permalink to &quot;手动管理缓存&quot;">​</a></h3><p>在某些情况下，你可能需要手动管理缓存。例如，你可以通过 <code>rollup.rollup</code> 方法的返回值来获取当前的缓存对象，并在后续构建中复用这个缓存对象：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// www.javascriptcn.com code example</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bundle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollup</span><span style="color:#E1E4E8;">(inputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">cache</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bundle; </span><span style="color:#6A737D;">// 获取缓存对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(outputOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在后续构建中复用缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputOptionsWithCache</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">inputOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">    cache, </span><span style="color:#6A737D;">// 复用缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bundle2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollup</span><span style="color:#E1E4E8;">(inputOptionsWithCache);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle2.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(outputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#008000;">// www.javascriptcn.com code example</span></span>
<span class="line"><span style="color:#0000FF;">async</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">build</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">bundle</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">rollup</span><span style="color:#000000;">(</span><span style="color:#001080;">inputOptions</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">cache</span><span style="color:#000000;"> } = </span><span style="color:#001080;">bundle</span><span style="color:#000000;">; </span><span style="color:#008000;">// 获取缓存对象</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#001080;">bundle</span><span style="color:#000000;">.</span><span style="color:#795E26;">write</span><span style="color:#000000;">(</span><span style="color:#001080;">outputOptions</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// 在后续构建中复用缓存</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">inputOptionsWithCache</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#000000;">    ...</span><span style="color:#001080;">inputOptions</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">cache</span><span style="color:#000000;">, </span><span style="color:#008000;">// 复用缓存</span></span>
<span class="line"><span style="color:#000000;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">bundle2</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">rollup</span><span style="color:#000000;">(</span><span style="color:#001080;">inputOptionsWithCache</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#001080;">bundle2</span><span style="color:#000000;">.</span><span style="color:#795E26;">write</span><span style="color:#000000;">(</span><span style="color:#001080;">outputOptions</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><p>通过这种方式，你可以在多个构建任务之间共享缓存，进一步提高构建效率。</p>`,12),e=[o];function t(c,r,y,E,i,u){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{d as __pageData,h as default};
