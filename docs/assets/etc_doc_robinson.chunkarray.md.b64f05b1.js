import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.80c893c1.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.chunkarray.md","filePath":"etc/doc/robinson.chunkarray.md"}'),l={name:"etc/doc/robinson.chunkarray.md"},p=o(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.chunkarray.html">chunkArray</a></p><h2 id="chunkarray-function" tabindex="-1">chunkArray() function <a class="header-anchor" href="#chunkarray-function" aria-label="Permalink to &quot;chunkArray() function&quot;">​</a></h2><p><code>chunkArray</code> 函数接受一个数组和一个大小参数，并返回一个新数组，其中返回原始数组被分割成指定大小的较小数组。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">chunkArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">array</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#FFAB70;">size</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;&gt;;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">chunkArray</span><span style="color:#000000;">(</span><span style="color:#001080;">array</span><span style="color:#000000;">: </span><span style="color:#267F99;">Array</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">any</span><span style="color:#000000;">&gt;, </span><span style="color:#001080;">size</span><span style="color:#000000;">?: </span><span style="color:#267F99;">number</span><span style="color:#000000;">): </span><span style="color:#267F99;">Array</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Array</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">any</span><span style="color:#000000;">&gt;&gt;;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>array</td><td>Array&lt;any&gt;</td><td><code>array</code> 参数是任何类型的数组。它是需要被分成更小的数组的数组。</td></tr><tr><td>size</td><td>number</td><td><em>(Optional)</em> “size”参数确定数组每个块中应包含的元素数量。默认情况下，它设置为 1，这意味着每个元素都是它自己的块。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>Array&lt;Array&lt;any&gt;&gt;</p><p>返回一个新二维数组,数组每一项的长度为第二个参数的长度</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]; </span><span style="color:#B392F0;">chunkArray</span><span style="color:#E1E4E8;">(arr,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">],[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{} ;</span><span style="color:#B392F0;">chunkArray</span><span style="color:#E1E4E8;">(arr,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(not a array)</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">arr</span><span style="color:#000000;"> =[</span><span style="color:#098658;">1</span><span style="color:#000000;">,</span><span style="color:#098658;">2</span><span style="color:#000000;">,</span><span style="color:#098658;">3</span><span style="color:#000000;">,</span><span style="color:#098658;">4</span><span style="color:#000000;">]; </span><span style="color:#795E26;">chunkArray</span><span style="color:#000000;">(</span><span style="color:#001080;">arr</span><span style="color:#000000;">,</span><span style="color:#098658;">2</span><span style="color:#000000;">)</span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> [[</span><span style="color:#098658;">1</span><span style="color:#000000;">,</span><span style="color:#098658;">2</span><span style="color:#000000;">],[</span><span style="color:#098658;">3</span><span style="color:#000000;">,</span><span style="color:#098658;">4</span><span style="color:#000000;">]]</span></span>
<span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">obj</span><span style="color:#000000;"> ={} ;</span><span style="color:#795E26;">chunkArray</span><span style="color:#000000;">(</span><span style="color:#001080;">arr</span><span style="color:#000000;">,</span><span style="color:#098658;">2</span><span style="color:#000000;">)</span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#795E26;">Error</span><span style="color:#000000;">(</span><span style="color:#001080;">not</span><span style="color:#000000;"> </span><span style="color:#001080;">a</span><span style="color:#000000;"> </span><span style="color:#001080;">array</span><span style="color:#000000;">)</span></span></code></pre></div>`,12),r=[p];function t(e,c,y,E,i,d){return a(),n("div",null,r)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
