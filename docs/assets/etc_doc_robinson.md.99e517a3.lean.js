import{_ as e,o as r,c as o,Q as n,k as l,a as t}from"./chunks/framework.a7175731.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.md","filePath":"etc/doc/robinson.md"}'),a={name:"etc/doc/robinson.md"},i=n("",5),d=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Function"),l("th",null,"Description")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("a",{href:"./robinson.addclass.html"},"addClass(dom, classNm)")]),l("td",null,"该函数将一个类添加到 DOM 元素。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.addnode.html"},"addNode(parentDom, dom, position)")]),l("td",null,"函数“addNode”将 DOM 元素或字符串插入到父 DOM 元素的指定位置。")]),l("tr",{"a:456":""},[l("td",null,[l("a",{href:"./robinson.asigndata.html"},"asignData(obj1, obj2)")]),l("td",null,"合并对象 这里与Object.asign 的区别是 asignData 只会合并 obj1 中存在的key 如: let o ={ a:123, } let b ={ a:456, b:111 } asignData(o,b) o:")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.base64toblob.html"},"base64ToBlob(base64)")]),l("td",null,"base64 转blob")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.bind.html"},"bind(dom, eventType, callBack, isCatch)")]),l("td",null,"该函数将事件侦听器绑定到 TypeScript 中的 DOM 元素。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.blobtobase64.html"},"blobToBase64(blob, mime)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.calc.html"},"calc(number1, number2, operate)")]),l("td",null,"数值计算")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.compose.html"},"compose(funcs)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.copytoclipboard.html"},"copyToClipboard(text)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.currying.html"},"currying(fn)")]),l("td",null,"柯里化函数接受一个函数作为输入并返回一个新函数，该函数可以使用多个参数或以柯里化方式调用。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.debounce.html"},"debounce(fn, delay, isLimmediate)")]),l("td",null,"参数1 回调 参数2 延迟时间 参数3 第一次是否立即执行")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.deepclone.html"},"deepClone(originalValue)")]),l("td",null,"“deepClone”函数用于创建对象或数组的深层副本，包括处理复杂类型，例如集合、映射和符号。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.downloadbybase64.html"},"downloadByBase64(buf, fileNm, mime)")]),l("td",null,"base64 下载文件")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.downloadbyblob.html"},"downloadByBlob(blob, fileNm, mime)")]),l("td",null,"blob流下载文件")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.downloadbyurl.html"},"downloadByUrl(url, filename, type)")]),l("td",null,"下载图片到本地")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.formatdate.html"},"formatDate(date, pattern)")]),l("td",null,"格式化时间")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getafterdate.html"},"getAfterDate(date, option)")]),l("td",null,"日期增加")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getbeforedate.html"},"getBeforeDate(date, option)")]),l("td",null,"日期减少")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getchunkarray.html"},"getChunkArray(array, size)")]),l("td",null,[l("code",null,"chunkArray"),t(" 函数接受一个数组和一个大小参数，并返回一个新数组，其中原始数组被分割成指定大小的较小数组。")])]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getdiff.html"},"getDiff(start, end, unitType, float)")]),l("td",null,"计算两个日期相差时间")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getetc.html"},"getEtc(value, len, etcStr)")]),l("td",null,"函数“getEtc”接受一个字符串值并返回指定长度的子字符串，并在末尾附加一个可选的“etcStr”。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getfilechunk.html"},"getFileChunk(file, chunkSize)")]),l("td",null,"生成切片数组")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getfilesize.html"},"getFileSize(file, unit)")]),l("td",null,"获取文件大小")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getfiletype.html"},"getFileType(file)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getmimetype.html"},"getMimeType(mime)")]),l("td",null,"获取文件的mime类型")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getnode.html"},"getNode(domName)")]),l("td",null,"函数 getNode 将 DOM 元素名称作为输入，如果找到则返回相应的元素，否则返回 null。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getnodes.html"},"getNodes(domName)")]),l("td",null,"函数“getNodes”返回与给定选择器匹配的 DOM 节点的 NodeList，如果未找到节点，则返回 null。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getrandom.html"},"getRandom(min, max, point)")]),l("td",null,"函数 getRandom 生成指定范围内具有指定小数位数的随机数。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getrelarray.html"},"getRelArray(array)")]),l("td",null,"函数“getRelArray”接受一个数组作为输入，并返回一个包含所有非空元素的新数组。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.gettimestamp.html"},"getTimestamp(date)")]),l("td",null,"获取当前日期的时间戳")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.getuniqueid.html"},"getUniqueId()")]),l("td",null,"该函数使用随机字符串模式生成唯一 ID。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.hasclass.html"},"hasClass(dom, classNm)")]),l("td",null,"该函数检查元素是否具有特定的类名。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.hastypein.html"},"hasTypeIn(value, types)")]),l("td",null,"该函数检查给定值的类型是否存在于给定类型数组中。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.hextorgb.html"},"hexToRgb(hex)")]),l("td",null,"hex转RGB")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.hextorgba.html"},"hexToRgba(hex)")]),l("td",null,"hex转rgba")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.imgcompression.html"},"imgCompression(file, size)")]),l("td",null,"图片压缩")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.insertstr.html"},"insertStr(str, start, char)")]),l("td",null,"函数“insertStr”接受一个字符串、一个起始索引和一个字符，并返回一个新字符串，其中在指定索引处插入了该字符。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.is.html"},"is(value, type)")]),l("td",null,"返回是某个类型的判断结果")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isafter.html"},"isAfter(start, end)")]),l("td",null,"判断一个日期是否在另一个日期之后")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isarray.html"},"isArray(value)")]),l("td",null,"接受一个任意类型判断该类型是否是数组并返回。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isbefore.html"},"isBefore(start, end)")]),l("td",null,"判断一个日期是否在另一个日期之前")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isboolean.html"},"isBoolean(value)")]),l("td",null,"函数“isBoolean”检查值是否为布尔类型。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isdecimal.html"},"isDecimal(s)")]),l("td",null,"检查变量是否为实数")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.iselement.html"},"isElement(val)")]),l("td",null,"是否为window格式")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isemail.html"},"isEmail(s)")]),l("td",null,"检查字符串是否为合法email地址")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isempty.html"},"isEmpty(value)")]),l("td",null,"该函数通过将 JSON 表示形式与空数组或对象进行比较来检查值是否为空。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.iseqtype.html"},"isEqType(value, value2)")]),l("td",null,"函数“isEqType”检查两个值的类型是否相等。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.iseqvalue.html"},"isEqValue(value1, value2)")]),l("td",null,"函数“isEqValue”比较两个值，如果它们的值和类型相等则返回 true。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isexternal.html"},"isExternal(path)")]),l("td",null,"判断是否为外链")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isfinite_2.html"},"isFinite_2(value)")]),l("td",null,"该函数检查一个值是否是有限数,原生的已经很好用了 这里是为了保存api统一。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isfunction.html"},"isFunction(value)")]),l("td",null,"该函数检查给定值是函数。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.ishex.html"},"isHex(color)")]),l("td",null,"判断是否为 16进制颜色")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isidcard.html"},"isIdCard(id)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isie.html"},"isIE(win)")]),l("td",null,"判断是否是ie浏览器")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isint.html"},"isInt(value)")]),l("td",null,"函数“isInteger”检查给定值是否为整数,原生的判断已经很好用了 es6+。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isleapyear.html"},"isLeapYear(year)")]),l("td",null,"判断是否是闰年")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.ismobilenum.html"},"isMobileNum(s)")]),l("td",null,"是否为合法手机号")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isnan_2.html"},"isNaN_2(value)")]),l("td",null,"该函数检查值是否为 NaN。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isnode.html"},"isNode(el)")]),l("td",null,"该函数检查元素是否是节点。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isnull.html"},"isNull(value)")]),l("td",null,"函数“isNull”检查给定值是否为空。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isnumber.html"},"isNumber(value)")]),l("td",null,"该函数检查值是否为数字。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isobjectlike.html"},"isObjectLike(value)")]),l("td",null,"该函数检查值是否是类对象like 类型。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isorigindate.html"},"isOriginDate(val)")]),l("td",null,"是否为日期格式")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.ispromise.html"},"isPromise(val)")]),l("td",null,"是否为promise格式")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isrange.html"},"isRange(value, min, max)")]),l("td",null,"该函数检查给定值是否在指定范围内。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isreftype.html"},"isRefType(value)")]),l("td",null,"该函数检查值是否为引用类型。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isregexp.html"},"isRegExp(val)")]),l("td",null,"是否为正则格式")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isrgb.html"},"isRgb(color)")]),l("td",null,"判断是否为 rgb颜色")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isrgba.html"},"isRgba(color)")]),l("td",null,"判断是否为 rgba颜色")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.issimpletype.html"},"isSimpleType(value)")]),l("td",null,"该函数检查值是否为简单值（数字、字符串、布尔值、符号、null、undefined 或 bigint）或复杂值（函数、对象、数组、集合、映射）。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isstring.html"},"isString(value)")]),l("td",null,"函数isString 检查给定值是否是字符串。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.issymbol.html"},"isSymbol(value)")]),l("td",null,"该函数检查值是否是Symbol 类型的对象。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isundefined.html"},"isUndefined(value)")]),l("td",null,"函数“isUndefined”检查值是否未定义。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.isurl.html"},"isUrl(url)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.mapping.html"},"mapping(enumData, options, expty)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.nodetostring.html"},"nodeToString(node)")]),l("td",null,[t("函数 "),l("code",null,"nodeToString"),t(" 接受一个 HTML 元素并返回它的字符串表示形式。")])]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.pipe.html"},"pipe(funcs)")]),l("td",null,"从左向右执行函数")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.preventdefault.html"},"preventDefault(event)")]),l("td",null,"该函数可防止事件的默认行为。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.printbyblob.html"},"printByBlob(blob, type)")]),l("td",null,"Yutian")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.printbydom.html"},"printByDom(el, custStyle)")]),l("td",null,"Yutian改(加了移除iframe)")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.removeclass.html"},"removeClass(dom, classNm)")]),l("td",null,"该函数从给定的 DOM 元素中删除指定的类名。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.removenode.html"},"removeNode(parentNode, dom)")]),l("td",null,"该函数从其父节点中删除指定的 DOM 元素。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.rendertmp.html"},"renderTmp(selecter, data)")]),l("td",null,"该函数获取元素的InnerHtml字符串模板,填写好内容并返回")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.replaceclass.html"},"replaceClass(dom, newClass, oldClass)")]),l("td",null,"该函数将给定 DOM 元素上的旧类替换为新类。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.replacenode.html"},"replaceNode(parentNode, newDom, oldDom)")]),l("td",null,"函数“replaceNode”用新的 DOM 元素或给定父元素中的字符串替换旧的 DOM 元素。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.rgbatohex.html"},"rgbaToHex(color)")]),l("td",null,"rgbaToHex")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.rgbtohex.html"},"rgbToHex(color)")]),l("td",null,"rgbToHex")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.stoppropagation.html"},"stopPropagation(event)")]),l("td",null,"函数 stopPropagation 阻止事件在事件链中向上冒泡。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.stringtonode.html"},"stringToNode(str)")]),l("td",null,"该函数接受一个字符串并返回新创建的 div 元素的第一个子节点，并将该字符串作为其innerHTML。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.throttle.html"},"throttle(fn, immediate, leading, trailing)")]),l("td",null,[l("code",null,"throttle"),t(" 函数是节流机制的 TypeScript 实现，它限制函数调用的速率。")])]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.transhightlight.html"},"transHightLight(str, keyWords, color)")]),l("td")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.unbind.html"},"unBind(dom, eventType, fnName)")]),l("td",null,"函数 unBind 从 DOM 元素中删除事件侦听器。")]),l("tr",null,[l("td",null,[l("a",{href:"./robinson.urltobase64.html"},"urlToBase64(url, mime)")]),l("td",null,"img url 转为base64")])])],-1),u=n("",4),s=[i,d,u];function h(b,m,f,c,p,g){return r(),o("div",null,s)}const v=e(a,[["render",h]]);export{_ as __pageData,v as default};
