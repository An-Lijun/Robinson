import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.80c893c1.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.currying.md","filePath":"etc/doc/robinson.currying.md"}'),t={name:"etc/doc/robinson.currying.md"},e=o('<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.currying.html">currying</a></p><h2 id="currying-function" tabindex="-1">currying() function <a class="header-anchor" href="#currying-function" aria-label="Permalink to &quot;currying() function&quot;">​</a></h2><p>柯里化函数接受一个函数作为输入并返回一个新函数，该函数可以使用多个参数或以柯里化方式调用。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">currying</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">currying</span><span style="color:#000000;">(</span><span style="color:#795E26;">fn</span><span style="color:#000000;">: </span><span style="color:#267F99;">Function</span><span style="color:#000000;">): (...</span><span style="color:#001080;">args</span><span style="color:#000000;">: </span><span style="color:#267F99;">any</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#267F99;">any</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>fn</td><td>Function</td><td>参数“fn”是我们要应用柯里化的函数。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>(...args: any) =&gt; any</p><p>正在返回柯里化函数。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>```JavaScript ```</p>',12),r=[e];function p(l,c,i,y,d,h){return a(),n("div",null,r)}const g=s(t,[["render",p]]);export{E as __pageData,g as default};
