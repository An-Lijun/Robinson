import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.80c893c1.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.add.md","filePath":"etc/doc/robinson.add.md"}'),e={name:"etc/doc/robinson.add.md"},t=o('<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.add.html">add</a></p><h2 id="add-function" tabindex="-1">add() function <a class="header-anchor" href="#add-function" aria-label="Permalink to &quot;add() function&quot;">​</a></h2><p>TypeScript 中的“add”函数接受两个数字作为输入并返回它们的总和，考虑正数、负数以及小数位。这里规避了相加的精度问题</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">number1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">number2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">number1</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">, </span><span style="color:#001080;">number2</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">): </span><span style="color:#267F99;">number</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>number1</td><td>number</td><td>要添加的第一个数字。它可以是正值，也可以是负值。</td></tr><tr><td>number2</td><td>number</td><td>“number2”参数是要添加到“number1”的第二个数字。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>number</p><p>两个输入数字的总和。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.3</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">  </span><span style="color:#795E26;">add</span><span style="color:#000000;"> (</span><span style="color:#098658;">0.1</span><span style="color:#000000;">,</span><span style="color:#098658;">0.2</span><span style="color:#000000;">)</span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#098658;">0.3</span></span></code></pre></div>',12),p=[t];function l(r,c,d,i,y,E){return a(),n("div",null,p)}const m=s(e,[["render",l]]);export{u as __pageData,m as default};
