import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a333c6fb.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/jest/src/use.md","filePath":"etc/jest/src/use.md","lastUpdated":1738049586000}'),l={name:"etc/jest/src/use.md"},o=p(`<h2 id="十、jest-在不同场景下的应用" tabindex="-1">十、Jest 在不同场景下的应用 <a class="header-anchor" href="#十、jest-在不同场景下的应用" aria-label="Permalink to &quot;十、Jest 在不同场景下的应用&quot;">​</a></h2><h3 id="_10-1-前端开发中的应用" tabindex="-1">10.1 前端开发中的应用 <a class="header-anchor" href="#_10-1-前端开发中的应用" aria-label="Permalink to &quot;10.1 前端开发中的应用&quot;">​</a></h3><ul><li><strong>React 组件测试</strong>：使用 Jest 结合 React Testing Library 或 Enzyme，可以方便地测试 React 组件的渲染、交互和状态变化。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { render, fireEvent } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@testing-library/react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyComponent </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./MyComponent&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;renders MyComponent and clicks button&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">getByText</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#E1E4E8;"> /&gt;);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Click me&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fireEvent.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">(button);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 断言组件状态变化</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">React</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#A31515;">&#39;react&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">render</span><span style="color:#000000;">, </span><span style="color:#001080;">fireEvent</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@testing-library/react&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">MyComponent</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;./MyComponent&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;renders MyComponent and clicks button&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">getByText</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">MyComponent</span><span style="color:#000000;"> </span><span style="color:#800000;">/&gt;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">button</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getByText</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Click me&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">fireEvent</span><span style="color:#000000;">.</span><span style="color:#795E26;">click</span><span style="color:#000000;">(</span><span style="color:#001080;">button</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 断言组件状态变化</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><ul><li><strong>Vue 组件测试</strong>：对于 Vue 组件，可以使用 Jest 结合 Vue Test Utils 进行测试。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mount } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue/test-utils&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyVueComponent </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./MyVueComponent.vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;renders Vue component and updates data&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wrapper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(MyVueComponent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    wrapper.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 断言组件数据变化</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">mount</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@vue/test-utils&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">MyVueComponent</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;./MyVueComponent.vue&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;renders Vue component and updates data&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">wrapper</span><span style="color:#000000;"> = </span><span style="color:#795E26;">mount</span><span style="color:#000000;">(</span><span style="color:#001080;">MyVueComponent</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">wrapper</span><span style="color:#000000;">.</span><span style="color:#795E26;">find</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;button&#39;</span><span style="color:#000000;">).</span><span style="color:#795E26;">trigger</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;click&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 断言组件数据变化</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h3 id="_10-2-后端开发中的应用" tabindex="-1">10.2 后端开发中的应用 <a class="header-anchor" href="#_10-2-后端开发中的应用" aria-label="Permalink to &quot;10.2 后端开发中的应用&quot;">​</a></h3><ul><li><strong>Node.js 应用测试</strong>：在 Node.js 应用开发中，Jest 可以用于测试路由、中间件、数据库操作等功能。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;supertest&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./app&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET / returns 200&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">/</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">request</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;supertest&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">app</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./app&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GET / returns 200&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">).</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;</span><span style="color:#CD3131;">/</span></span></code></pre></div><h3 id="_10-2-后端开发中的应用-续" tabindex="-1">10.2 后端开发中的应用（续） <a class="header-anchor" href="#_10-2-后端开发中的应用-续" aria-label="Permalink to &quot;10.2 后端开发中的应用（续）&quot;">​</a></h3><ul><li><strong>Node.js 应用测试</strong>：</li></ul><ul><li><ul><li><strong>路由测试</strong>：在测试路由时，除了验证响应状态码，还可以检查响应体的内容。例如，假设我们有一个简单的 Express 应用，包含一个返回用户列表的路由。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;Alice&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;Bob&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">(users);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;supertest&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET /users returns users list&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.status).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.body).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(users);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">express</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;express&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">app</span><span style="color:#000000;"> = </span><span style="color:#795E26;">express</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">users</span><span style="color:#000000;"> = [</span></span>
<span class="line"><span style="color:#000000;">    { </span><span style="color:#001080;">id:</span><span style="color:#000000;"> </span><span style="color:#098658;">1</span><span style="color:#000000;">, </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Alice&#39;</span><span style="color:#000000;"> },</span></span>
<span class="line"><span style="color:#000000;">    { </span><span style="color:#001080;">id:</span><span style="color:#000000;"> </span><span style="color:#098658;">2</span><span style="color:#000000;">, </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Bob&#39;</span><span style="color:#000000;"> }</span></span>
<span class="line"><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#001080;">app</span><span style="color:#000000;">.</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/users&#39;</span><span style="color:#000000;">, (</span><span style="color:#001080;">req</span><span style="color:#000000;">, </span><span style="color:#001080;">res</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">res</span><span style="color:#000000;">.</span><span style="color:#795E26;">json</span><span style="color:#000000;">(</span><span style="color:#001080;">users</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">request</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;supertest&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GET /users returns users list&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">).</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/users&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">status</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">200</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">body</span><span style="color:#000000;">).</span><span style="color:#795E26;">toEqual</span><span style="color:#000000;">(</span><span style="color:#001080;">users</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><ul><li><strong>中间件测试</strong>：中间件在 Node.js 应用中起着至关重要的作用，比如验证用户身份、记录日志等。以一个简单的身份验证中间件为例，使用 Jest 测试它是否能正确拦截未授权的请求。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 模拟身份验证中间件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">authMiddleware</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">authHeader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.headers[</span><span style="color:#9ECBFF;">&#39;authorization&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (authHeader </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> authHeader.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Bearer &#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> authHeader.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里简单模拟token验证</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (token </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;validToken&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/protected&#39;</span><span style="color:#E1E4E8;">, authMiddleware, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Protected resource&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;supertest&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET /protected rejects unauthenticated requests&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/protected&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.status).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.text).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET /protected allows authenticated requests&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/protected&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Authorization&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Bearer validToken&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.status).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.text).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Protected resource&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">express</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;express&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">app</span><span style="color:#000000;"> = </span><span style="color:#795E26;">express</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#008000;">// 模拟身份验证中间件</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#795E26;">authMiddleware</span><span style="color:#000000;"> = (</span><span style="color:#001080;">req</span><span style="color:#000000;">, </span><span style="color:#001080;">res</span><span style="color:#000000;">, </span><span style="color:#001080;">next</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">authHeader</span><span style="color:#000000;"> = </span><span style="color:#001080;">req</span><span style="color:#000000;">.</span><span style="color:#001080;">headers</span><span style="color:#000000;">[</span><span style="color:#A31515;">&#39;authorization&#39;</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">authHeader</span><span style="color:#000000;"> &amp;&amp; </span><span style="color:#001080;">authHeader</span><span style="color:#000000;">.</span><span style="color:#795E26;">startsWith</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Bearer &#39;</span><span style="color:#000000;">)) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">token</span><span style="color:#000000;"> = </span><span style="color:#001080;">authHeader</span><span style="color:#000000;">.</span><span style="color:#795E26;">split</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39; &#39;</span><span style="color:#000000;">)[</span><span style="color:#098658;">1</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#008000;">// 这里简单模拟token验证</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">token</span><span style="color:#000000;"> === </span><span style="color:#A31515;">&#39;validToken&#39;</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">next</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">res</span><span style="color:#000000;">.</span><span style="color:#795E26;">status</span><span style="color:#000000;">(</span><span style="color:#098658;">401</span><span style="color:#000000;">).</span><span style="color:#795E26;">send</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Unauthorized&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">};</span></span>
<span class="line"><span style="color:#001080;">app</span><span style="color:#000000;">.</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/protected&#39;</span><span style="color:#000000;">, </span><span style="color:#001080;">authMiddleware</span><span style="color:#000000;">, (</span><span style="color:#001080;">req</span><span style="color:#000000;">, </span><span style="color:#001080;">res</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">res</span><span style="color:#000000;">.</span><span style="color:#795E26;">send</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Protected resource&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">request</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;supertest&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GET /protected rejects unauthenticated requests&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">).</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/protected&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">status</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">401</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">text</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Unauthorized&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GET /protected allows authenticated requests&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">     .</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/protected&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">     .</span><span style="color:#795E26;">set</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Authorization&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;Bearer validToken&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">status</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">200</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">text</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Protected resource&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><ul><li><strong>数据库操作测试</strong>：对于涉及数据库操作的函数，利用 Jest 的模拟函数来隔离测试。以使用mysql模块进行数据库查询为例。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 模拟数据库连接池</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mysql.</span><span style="color:#B392F0;">createPool</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    host: </span><span style="color:#9ECBFF;">&#39;localhost&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    user: </span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    password: </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    database: </span><span style="color:#9ECBFF;">&#39;testdb&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 假设一个获取用户信息的函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUserById</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">query</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;SELECT * FROM users WHERE id =?&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    pool.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(query, [id], (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">results</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, results[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 测试文件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">getUserById</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./userService&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">jest.</span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;getUserById retrieves user from database&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mockResults</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{ id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;Alice&#39;</span><span style="color:#E1E4E8;"> }];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mockQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, mockResults);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    mysql.createPool.</span><span style="color:#B392F0;">mockReturnValue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        query: mockQuery</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getUserById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(error).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(mockResults[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mysql</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mysql&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// 模拟数据库连接池</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">pool</span><span style="color:#000000;"> = </span><span style="color:#001080;">mysql</span><span style="color:#000000;">.</span><span style="color:#795E26;">createPool</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">host:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;localhost&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">user:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">password:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;password&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">database:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;testdb&#39;</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#008000;">// 假设一个获取用户信息的函数</span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">getUserById</span><span style="color:#000000;">(</span><span style="color:#001080;">id</span><span style="color:#000000;">, </span><span style="color:#001080;">callback</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">query</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&#39;SELECT * FROM users WHERE id =?&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">pool</span><span style="color:#000000;">.</span><span style="color:#795E26;">query</span><span style="color:#000000;">(</span><span style="color:#001080;">query</span><span style="color:#000000;">, [</span><span style="color:#001080;">id</span><span style="color:#000000;">], (</span><span style="color:#001080;">error</span><span style="color:#000000;">, </span><span style="color:#001080;">results</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">error</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">callback</span><span style="color:#000000;">(</span><span style="color:#001080;">error</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">callback</span><span style="color:#000000;">(</span><span style="color:#0000FF;">null</span><span style="color:#000000;">, </span><span style="color:#001080;">results</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">]);</span></span>
<span class="line"><span style="color:#000000;">    });</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#008000;">// 测试文件</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">getUserById</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./userService&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mysql</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mysql&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">jest</span><span style="color:#000000;">.</span><span style="color:#795E26;">mock</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mysql&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;getUserById retrieves user from database&#39;</span><span style="color:#000000;">, (</span><span style="color:#001080;">done</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mockResults</span><span style="color:#000000;"> = [{ </span><span style="color:#001080;">id:</span><span style="color:#000000;"> </span><span style="color:#098658;">1</span><span style="color:#000000;">, </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Alice&#39;</span><span style="color:#000000;"> }];</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mockQuery</span><span style="color:#000000;"> = </span><span style="color:#001080;">jest</span><span style="color:#000000;">.</span><span style="color:#795E26;">fn</span><span style="color:#000000;">((</span><span style="color:#001080;">sql</span><span style="color:#000000;">, </span><span style="color:#001080;">values</span><span style="color:#000000;">, </span><span style="color:#001080;">cb</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">cb</span><span style="color:#000000;">(</span><span style="color:#0000FF;">null</span><span style="color:#000000;">, </span><span style="color:#001080;">mockResults</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    });</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">mysql</span><span style="color:#000000;">.</span><span style="color:#001080;">createPool</span><span style="color:#000000;">.</span><span style="color:#795E26;">mockReturnValue</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">query:</span><span style="color:#000000;"> </span><span style="color:#001080;">mockQuery</span></span>
<span class="line"><span style="color:#000000;">    });</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">getUserById</span><span style="color:#000000;">(</span><span style="color:#098658;">1</span><span style="color:#000000;">, (</span><span style="color:#001080;">error</span><span style="color:#000000;">, </span><span style="color:#001080;">user</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">error</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#0000FF;">null</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">user</span><span style="color:#000000;">).</span><span style="color:#795E26;">toEqual</span><span style="color:#000000;">(</span><span style="color:#001080;">mockResults</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">]);</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">done</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">    });</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h3 id="_10-3-测试-graphql-api" tabindex="-1">10.3 测试 GraphQL API <a class="header-anchor" href="#_10-3-测试-graphql-api" aria-label="Permalink to &quot;10.3 测试 GraphQL API&quot;">​</a></h3><p>随着 GraphQL 在前后端开发中的广泛应用，使用 Jest 测试 GraphQL API 也变得越来越重要。以express - graphql为例，展示如何使用 Jest 测试 GraphQL 的查询和变更。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">buildSchema</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;graphql&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">graphqlHTTP</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express - graphql&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 构建GraphQL schema</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">schema</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildSchema</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    type Query {</span></span>
<span class="line"><span style="color:#9ECBFF;">        hello: String</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 定义解析器</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/graphql&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">graphqlHTTP</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    schema: schema,</span></span>
<span class="line"><span style="color:#E1E4E8;">    rootValue: root,</span></span>
<span class="line"><span style="color:#E1E4E8;">    graphiql: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 开启GraphiQL调试工具</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;supertest&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GraphQL query hello returns &quot;Hello world!&quot;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/graphql&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ query: </span><span style="color:#9ECBFF;">&#39;{ hello }&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.status).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.body.data.hello).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">express</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;express&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">buildSchema</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;graphql&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">graphqlHTTP</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;express - graphql&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// 构建GraphQL schema</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">schema</span><span style="color:#000000;"> = </span><span style="color:#795E26;">buildSchema</span><span style="color:#000000;">(</span><span style="color:#A31515;">\`</span></span>
<span class="line"><span style="color:#A31515;">    type Query {</span></span>
<span class="line"><span style="color:#A31515;">        hello: String</span></span>
<span class="line"><span style="color:#A31515;">    }</span></span>
<span class="line"><span style="color:#A31515;">\`</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// 定义解析器</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">root</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">hello</span><span style="color:#001080;">:</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Hello world!&#39;</span></span>
<span class="line"><span style="color:#000000;">};</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">app</span><span style="color:#000000;"> = </span><span style="color:#795E26;">express</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">app</span><span style="color:#000000;">.</span><span style="color:#795E26;">use</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/graphql&#39;</span><span style="color:#000000;">, </span><span style="color:#795E26;">graphqlHTTP</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">schema:</span><span style="color:#000000;"> </span><span style="color:#001080;">schema</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">rootValue:</span><span style="color:#000000;"> </span><span style="color:#001080;">root</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">graphiql:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;"> </span><span style="color:#008000;">// 开启GraphiQL调试工具</span></span>
<span class="line"><span style="color:#000000;">}));</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">request</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;supertest&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GraphQL query hello returns &quot;Hello world!&quot;&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">     .</span><span style="color:#795E26;">post</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/graphql&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">     .</span><span style="color:#795E26;">send</span><span style="color:#000000;">({ </span><span style="color:#001080;">query:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;{ hello }&#39;</span><span style="color:#000000;"> });</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">status</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">200</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">body</span><span style="color:#000000;">.</span><span style="color:#001080;">data</span><span style="color:#000000;">.</span><span style="color:#001080;">hello</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Hello world!&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h3 id="_10-4-测试工具与库的结合使用" tabindex="-1">10.4 测试工具与库的结合使用 <a class="header-anchor" href="#_10-4-测试工具与库的结合使用" aria-label="Permalink to &quot;10.4 测试工具与库的结合使用&quot;">​</a></h3><p>在实际项目中，Jest 常常与其他工具和库结合使用，以提高测试效率和质量。</p><ul><li><strong>Sinon.js</strong>：Sinon.js 是一个功能强大的 JavaScript 测试库，提供了丰富的模拟、桩（stub）和间谍（spy）功能。与 Jest 结合使用，可以更灵活地控制测试环境。例如，在测试一个依赖外部 API 的函数时，使用 Sinon 的stub来模拟 API 调用，而不是实际发送请求。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sinon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sinon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">axios</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./myFunction&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myFunction calls external API correctly&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mockResponse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { data: { message: </span><span style="color:#9ECBFF;">&#39;Mocked response&#39;</span><span style="color:#E1E4E8;"> } };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sinon.</span><span style="color:#B392F0;">stub</span><span style="color:#E1E4E8;">(axios, </span><span style="color:#9ECBFF;">&#39;get&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">resolves</span><span style="color:#E1E4E8;">(mockResponse);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(mockResponse.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    stub.</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">sinon</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;sinon&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">axios</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;axios&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">myFunction</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./myFunction&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;myFunction calls external API correctly&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mockResponse</span><span style="color:#000000;"> = { </span><span style="color:#001080;">data:</span><span style="color:#000000;"> { </span><span style="color:#001080;">message:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Mocked response&#39;</span><span style="color:#000000;"> } };</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">stub</span><span style="color:#000000;"> = </span><span style="color:#001080;">sinon</span><span style="color:#000000;">.</span><span style="color:#795E26;">stub</span><span style="color:#000000;">(</span><span style="color:#001080;">axios</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;get&#39;</span><span style="color:#000000;">).</span><span style="color:#795E26;">resolves</span><span style="color:#000000;">(</span><span style="color:#001080;">mockResponse</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">result</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">myFunction</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">result</span><span style="color:#000000;">).</span><span style="color:#795E26;">toEqual</span><span style="color:#000000;">(</span><span style="color:#001080;">mockResponse</span><span style="color:#000000;">.</span><span style="color:#001080;">data</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">stub</span><span style="color:#000000;">.</span><span style="color:#795E26;">restore</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><ul><li><strong>Cypress</strong>：Cypress 是一个用于前端自动化测试的工具，专注于浏览器端的交互测试。虽然 Jest 主要用于单元测试，但在一些场景下，结合 Cypress 可以实现更全面的测试覆盖。例如，使用 Jest 进行组件的单元测试，使用 Cypress 进行端到端的集成测试，确保整个应用在浏览器环境中的行为符合预期。</li></ul><h3 id="_10-5-持续集成中的-jest" tabindex="-1">10.5 持续集成中的 Jest <a class="header-anchor" href="#_10-5-持续集成中的-jest" aria-label="Permalink to &quot;10.5 持续集成中的 Jest&quot;">​</a></h3><p>在持续集成（CI）环境中，Jest 扮演着关键角色，确保每次代码提交都经过充分的测试。以 GitHub Actions 为例，展示如何在 CI 环境中配置 Jest 测试。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">name: Jest Tests</span></span>
<span class="line"><span style="color:#e1e4e8;">on:</span></span>
<span class="line"><span style="color:#e1e4e8;">  push:</span></span>
<span class="line"><span style="color:#e1e4e8;">    branches:</span></span>
<span class="line"><span style="color:#e1e4e8;">      - main</span></span>
<span class="line"><span style="color:#e1e4e8;">jobs:</span></span>
<span class="line"><span style="color:#e1e4e8;">  build:</span></span>
<span class="line"><span style="color:#e1e4e8;">    runs - on: ubuntu - latest</span></span>
<span class="line"><span style="color:#e1e4e8;">    steps:</span></span>
<span class="line"><span style="color:#e1e4e8;">      - name: Checkout code</span></span>
<span class="line"><span style="color:#e1e4e8;">        uses: actions/checkout@v2</span></span>
<span class="line"><span style="color:#e1e4e8;">      - name: Set up Node.js</span></span>
<span class="line"><span style="color:#e1e4e8;">        uses: actions/setup - node@v2</span></span>
<span class="line"><span style="color:#e1e4e8;">        with:</span></span>
<span class="line"><span style="color:#e1e4e8;">          node - version: &#39;14&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">      - name: Install dependencies</span></span>
<span class="line"><span style="color:#e1e4e8;">        run: npm install</span></span>
<span class="line"><span style="color:#e1e4e8;">      - name: Run Jest tests</span></span>
<span class="line"><span style="color:#e1e4e8;">        run: npm test -- --coverage</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">name: Jest Tests</span></span>
<span class="line"><span style="color:#000000;">on:</span></span>
<span class="line"><span style="color:#000000;">  push:</span></span>
<span class="line"><span style="color:#000000;">    branches:</span></span>
<span class="line"><span style="color:#000000;">      - main</span></span>
<span class="line"><span style="color:#000000;">jobs:</span></span>
<span class="line"><span style="color:#000000;">  build:</span></span>
<span class="line"><span style="color:#000000;">    runs - on: ubuntu - latest</span></span>
<span class="line"><span style="color:#000000;">    steps:</span></span>
<span class="line"><span style="color:#000000;">      - name: Checkout code</span></span>
<span class="line"><span style="color:#000000;">        uses: actions/checkout@v2</span></span>
<span class="line"><span style="color:#000000;">      - name: Set up Node.js</span></span>
<span class="line"><span style="color:#000000;">        uses: actions/setup - node@v2</span></span>
<span class="line"><span style="color:#000000;">        with:</span></span>
<span class="line"><span style="color:#000000;">          node - version: &#39;14&#39;</span></span>
<span class="line"><span style="color:#000000;">      - name: Install dependencies</span></span>
<span class="line"><span style="color:#000000;">        run: npm install</span></span>
<span class="line"><span style="color:#000000;">      - name: Run Jest tests</span></span>
<span class="line"><span style="color:#000000;">        run: npm test -- --coverage</span></span></code></pre></div><p>通过上述配置，每次代码推送到main分支时，GitHub Actions 会自动拉取代码，安装依赖，然后运行 Jest 测试，并生成测试覆盖率报告。这有助于及时发现代码中的问题，保证项目的稳定性和质量。</p><h3 id="_10-6-jest-在微服务架构中的应用" tabindex="-1">10.6 Jest 在微服务架构中的应用 <a class="header-anchor" href="#_10-6-jest-在微服务架构中的应用" aria-label="Permalink to &quot;10.6 Jest 在微服务架构中的应用&quot;">​</a></h3><p>在微服务架构中，各个服务相互独立又协同工作。Jest 可以用于对每个微服务进行单元测试和集成测试，确保服务的可靠性和稳定性。</p><h4 id="_10-6-1-服务接口测试" tabindex="-1">10.6.1 服务接口测试 <a class="header-anchor" href="#_10-6-1-服务接口测试" aria-label="Permalink to &quot;10.6.1 服务接口测试&quot;">​</a></h4><p>每个微服务都会暴露一些接口供其他服务调用。使用 Jest 结合supertest等库，可以测试这些接口的正确性。例如，假设我们有一个用户管理微服务，提供了获取用户信息的接口。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">users</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;Alice&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    { id: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;Bob&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users/:id&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(req.params.id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> users.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">u</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> u.id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;User not found&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;supertest&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET /users/:id returns correct user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users/1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.status).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.body).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(users[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;GET /users/:id returns 404 for non - existent user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users/3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.status).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(response.text).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;User not found&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">express</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;express&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">app</span><span style="color:#000000;"> = </span><span style="color:#795E26;">express</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">users</span><span style="color:#000000;"> = [</span></span>
<span class="line"><span style="color:#000000;">    { </span><span style="color:#001080;">id:</span><span style="color:#000000;"> </span><span style="color:#098658;">1</span><span style="color:#000000;">, </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Alice&#39;</span><span style="color:#000000;"> },</span></span>
<span class="line"><span style="color:#000000;">    { </span><span style="color:#001080;">id:</span><span style="color:#000000;"> </span><span style="color:#098658;">2</span><span style="color:#000000;">, </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Bob&#39;</span><span style="color:#000000;"> }</span></span>
<span class="line"><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#001080;">app</span><span style="color:#000000;">.</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/users/:id&#39;</span><span style="color:#000000;">, (</span><span style="color:#001080;">req</span><span style="color:#000000;">, </span><span style="color:#001080;">res</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">userId</span><span style="color:#000000;"> = </span><span style="color:#795E26;">parseInt</span><span style="color:#000000;">(</span><span style="color:#001080;">req</span><span style="color:#000000;">.</span><span style="color:#001080;">params</span><span style="color:#000000;">.</span><span style="color:#001080;">id</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">user</span><span style="color:#000000;"> = </span><span style="color:#001080;">users</span><span style="color:#000000;">.</span><span style="color:#795E26;">find</span><span style="color:#000000;">(</span><span style="color:#001080;">u</span><span style="color:#000000;"> </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#001080;">u</span><span style="color:#000000;">.</span><span style="color:#001080;">id</span><span style="color:#000000;"> === </span><span style="color:#001080;">userId</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">user</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">res</span><span style="color:#000000;">.</span><span style="color:#795E26;">json</span><span style="color:#000000;">(</span><span style="color:#001080;">user</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">res</span><span style="color:#000000;">.</span><span style="color:#795E26;">status</span><span style="color:#000000;">(</span><span style="color:#098658;">404</span><span style="color:#000000;">).</span><span style="color:#795E26;">send</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;User not found&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">request</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;supertest&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GET /users/:id returns correct user&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">).</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/users/1&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">status</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">200</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">body</span><span style="color:#000000;">).</span><span style="color:#795E26;">toEqual</span><span style="color:#000000;">(</span><span style="color:#001080;">users</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">]);</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;GET /users/:id returns 404 for non - existent user&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">response</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">app</span><span style="color:#000000;">).</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/users/3&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">status</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">404</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">response</span><span style="color:#000000;">.</span><span style="color:#001080;">text</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;User not found&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h4 id="_10-6-2-服务间通信测试" tabindex="-1">10.6.2 服务间通信测试 <a class="header-anchor" href="#_10-6-2-服务间通信测试" aria-label="Permalink to &quot;10.6.2 服务间通信测试&quot;">​</a></h4><p>微服务之间通常通过 HTTP、消息队列等方式进行通信。在测试时，可以使用 Jest 模拟其他服务的响应，测试当前服务在不同通信场景下的行为。例如，使用nock库来模拟 HTTP 请求的响应，测试一个依赖其他服务获取数据的微服务。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">axios</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nock</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;nock&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./myService&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myService calls other service and processes response&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mockData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { message: </span><span style="color:#9ECBFF;">&#39;Mocked data from other service&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://other - service.com&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/data&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">reply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, mockData);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> myService.</span><span style="color:#B392F0;">fetchData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(mockData);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">axios</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;axios&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">nock</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;nock&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">myService</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./myService&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;myService calls other service and processes response&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mockData</span><span style="color:#000000;"> = { </span><span style="color:#001080;">message:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;Mocked data from other service&#39;</span><span style="color:#000000;"> };</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">nock</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;http://other - service.com&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">     .</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/data&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">     .</span><span style="color:#795E26;">reply</span><span style="color:#000000;">(</span><span style="color:#098658;">200</span><span style="color:#000000;">, </span><span style="color:#001080;">mockData</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">result</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#001080;">myService</span><span style="color:#000000;">.</span><span style="color:#795E26;">fetchData</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">result</span><span style="color:#000000;">).</span><span style="color:#795E26;">toEqual</span><span style="color:#000000;">(</span><span style="color:#001080;">mockData</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h3 id="_10-7-jest-与测试报告工具的整合" tabindex="-1">10.7 Jest 与测试报告工具的整合 <a class="header-anchor" href="#_10-7-jest-与测试报告工具的整合" aria-label="Permalink to &quot;10.7 Jest 与测试报告工具的整合&quot;">​</a></h3><p>为了更直观地展示测试结果，Jest 可以与一些测试报告工具进行整合。</p><h4 id="_10-7-1-jest-与-allure-的整合" tabindex="-1">10.7.1 Jest 与 Allure 的整合 <a class="header-anchor" href="#_10-7-1-jest-与-allure-的整合" aria-label="Permalink to &quot;10.7.1 Jest 与 Allure 的整合&quot;">​</a></h4><p>Allure 是一个功能强大的测试报告工具，它可以生成美观、详细的测试报告。通过jest - allure - reporter插件，可以将 Jest 的测试结果集成到 Allure 报告中。</p><ol><li>安装插件：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allure</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reporter</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">npm</span><span style="color:#000000;"> </span><span style="color:#A31515;">install</span><span style="color:#000000;"> </span><span style="color:#0000FF;">--save</span><span style="color:#000000;"> </span><span style="color:#A31515;">-</span><span style="color:#000000;"> </span><span style="color:#A31515;">dev</span><span style="color:#000000;"> </span><span style="color:#A31515;">jest</span><span style="color:#000000;"> </span><span style="color:#A31515;">-</span><span style="color:#000000;"> </span><span style="color:#A31515;">allure</span><span style="color:#000000;"> </span><span style="color:#A31515;">-</span><span style="color:#000000;"> </span><span style="color:#A31515;">reporter</span></span></code></pre></div><ol start="2"><li>在jest.config.js中配置：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其他配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">    reporters: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;jest - allure - reporter&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#267F99;">module</span><span style="color:#000000;">.</span><span style="color:#267F99;">exports</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 其他配置项</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">reporters:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#A31515;">&#39;default&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#A31515;">&#39;jest - allure - reporter&#39;</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><ol start="3"><li>运行测试后，在项目根目录下会生成allure - results目录，使用 Allure 命令行工具可以生成报告：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">allure</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serve</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">allure</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">results</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">allure</span><span style="color:#000000;"> </span><span style="color:#A31515;">serve</span><span style="color:#000000;"> </span><span style="color:#A31515;">allure</span><span style="color:#000000;"> </span><span style="color:#A31515;">-</span><span style="color:#000000;"> </span><span style="color:#A31515;">results</span></span></code></pre></div><p>生成的报告中会包含每个测试用例的详细信息，如执行时间、状态、断言结果等，方便团队成员查看和分析测试结果。</p><h4 id="_10-7-2-jest-与-cucumber-的整合-bdd-风格测试" tabindex="-1">10.7.2 Jest 与 Cucumber 的整合（BDD 风格测试） <a class="header-anchor" href="#_10-7-2-jest-与-cucumber-的整合-bdd-风格测试" aria-label="Permalink to &quot;10.7.2 Jest 与 Cucumber 的整合（BDD 风格测试）&quot;">​</a></h4><p>Cucumber 是一个支持行为驱动开发（BDD）的工具，它使用自然语言描述测试场景。通过cucumber - jest库，可以将 Jest 与 Cucumber 结合，实现 BDD 风格的测试。</p><ol><li>安装依赖：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install --save - dev cucumber - jest cucumber</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">npm install --save - dev cucumber - jest cucumber</span></span></code></pre></div><ol start="2"><li>创建features目录，在其中编写 Cucumber 的特性文件（.feature），例如login.feature：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Feature</span><span style="color:#E1E4E8;">: User Login</span></span>
<span class="line"><span style="color:#E1E4E8;">  As a user</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">I</span><span style="color:#E1E4E8;"> want to log </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> to the application</span></span>
<span class="line"><span style="color:#E1E4E8;">  So that </span><span style="color:#79B8FF;">I</span><span style="color:#E1E4E8;"> can access my account</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Scenario</span><span style="color:#E1E4E8;">: Successful login</span></span>
<span class="line"><span style="color:#E1E4E8;">    Given </span><span style="color:#79B8FF;">I</span><span style="color:#E1E4E8;"> am on the login page</span></span>
<span class="line"><span style="color:#E1E4E8;">    When </span><span style="color:#79B8FF;">I</span><span style="color:#E1E4E8;"> enter my username </span><span style="color:#9ECBFF;">&quot;testuser&quot;</span><span style="color:#E1E4E8;"> and password </span><span style="color:#9ECBFF;">&quot;testpass&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    And </span><span style="color:#79B8FF;">I</span><span style="color:#E1E4E8;"> click the login button</span></span>
<span class="line"><span style="color:#E1E4E8;">    Then </span><span style="color:#79B8FF;">I</span><span style="color:#E1E4E8;"> should be redirected to my account page</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">Feature: </span><span style="color:#001080;">User</span><span style="color:#000000;"> </span><span style="color:#001080;">Login</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">As</span><span style="color:#000000;"> </span><span style="color:#001080;">a</span><span style="color:#000000;"> </span><span style="color:#001080;">user</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0070C1;">I</span><span style="color:#000000;"> </span><span style="color:#001080;">want</span><span style="color:#000000;"> </span><span style="color:#001080;">to</span><span style="color:#000000;"> </span><span style="color:#001080;">log</span><span style="color:#000000;"> </span><span style="color:#0000FF;">in</span><span style="color:#000000;"> </span><span style="color:#001080;">to</span><span style="color:#000000;"> </span><span style="color:#001080;">the</span><span style="color:#000000;"> </span><span style="color:#001080;">application</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">So</span><span style="color:#000000;"> </span><span style="color:#001080;">that</span><span style="color:#000000;"> </span><span style="color:#0070C1;">I</span><span style="color:#000000;"> </span><span style="color:#001080;">can</span><span style="color:#000000;"> </span><span style="color:#001080;">access</span><span style="color:#000000;"> </span><span style="color:#001080;">my</span><span style="color:#000000;"> </span><span style="color:#001080;">account</span></span>
<span class="line"><span style="color:#000000;">  Scenario: </span><span style="color:#001080;">Successful</span><span style="color:#000000;"> </span><span style="color:#001080;">login</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">Given</span><span style="color:#000000;"> </span><span style="color:#0070C1;">I</span><span style="color:#000000;"> </span><span style="color:#001080;">am</span><span style="color:#000000;"> </span><span style="color:#001080;">on</span><span style="color:#000000;"> </span><span style="color:#001080;">the</span><span style="color:#000000;"> </span><span style="color:#001080;">login</span><span style="color:#000000;"> </span><span style="color:#001080;">page</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">When</span><span style="color:#000000;"> </span><span style="color:#0070C1;">I</span><span style="color:#000000;"> </span><span style="color:#001080;">enter</span><span style="color:#000000;"> </span><span style="color:#001080;">my</span><span style="color:#000000;"> </span><span style="color:#001080;">username</span><span style="color:#000000;"> </span><span style="color:#A31515;">&quot;testuser&quot;</span><span style="color:#000000;"> </span><span style="color:#001080;">and</span><span style="color:#000000;"> </span><span style="color:#001080;">password</span><span style="color:#000000;"> </span><span style="color:#A31515;">&quot;testpass&quot;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">And</span><span style="color:#000000;"> </span><span style="color:#0070C1;">I</span><span style="color:#000000;"> </span><span style="color:#001080;">click</span><span style="color:#000000;"> </span><span style="color:#001080;">the</span><span style="color:#000000;"> </span><span style="color:#001080;">login</span><span style="color:#000000;"> </span><span style="color:#001080;">button</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">Then</span><span style="color:#000000;"> </span><span style="color:#0070C1;">I</span><span style="color:#000000;"> </span><span style="color:#001080;">should</span><span style="color:#000000;"> </span><span style="color:#001080;">be</span><span style="color:#000000;"> </span><span style="color:#001080;">redirected</span><span style="color:#000000;"> </span><span style="color:#001080;">to</span><span style="color:#000000;"> </span><span style="color:#001080;">my</span><span style="color:#000000;"> </span><span style="color:#001080;">account</span><span style="color:#000000;"> </span><span style="color:#001080;">page</span></span></code></pre></div><ol start="3"><li>创建相应的步骤定义文件（.js），在其中使用 Jest 的断言实现每个步骤的逻辑：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">Given</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">When</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Then</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cucumber - jest&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">render</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fireEvent</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@testing - library/react&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LoginPage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./LoginPage&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">Given</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I am on the login page&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 渲染登录页面组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">LoginPage</span><span style="color:#E1E4E8;"> /&gt;);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可以进行一些初始化操作，如保存页面容器</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">When</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I enter my username &quot;testuser&quot; and password &quot;testpass&quot;&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 找到用户名和密码输入框，模拟输入</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">usernameInput</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementsByName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">passwordInput</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementsByName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    fireEvent.</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">(usernameInput, { target: { value: </span><span style="color:#9ECBFF;">&#39;testuser&#39;</span><span style="color:#E1E4E8;"> } });</span></span>
<span class="line"><span style="color:#E1E4E8;">    fireEvent.</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">(passwordInput, { target: { value: </span><span style="color:#9ECBFF;">&#39;testpass&#39;</span><span style="color:#E1E4E8;"> } });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">When</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I click the login button&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 找到登录按钮，模拟点击</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loginButton</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button[type=&quot;submit&quot;]&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    fireEvent.</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">(loginButton);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">Then</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;I should be redirected to my account page&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 断言页面是否重定向到正确的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(window.location.href).</span><span style="color:#B392F0;">toContain</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/account&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">Given</span><span style="color:#000000;">, </span><span style="color:#0070C1;">When</span><span style="color:#000000;">, </span><span style="color:#0070C1;">Then</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;cucumber - jest&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">render</span><span style="color:#000000;">, </span><span style="color:#0070C1;">fireEvent</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;@testing - library/react&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">LoginPage</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./LoginPage&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">Given</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;I am on the login page&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 渲染登录页面组件</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">container</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">LoginPage</span><span style="color:#000000;"> </span><span style="color:#800000;">/&gt;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 可以进行一些初始化操作，如保存页面容器</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#795E26;">When</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;I enter my username &quot;testuser&quot; and password &quot;testpass&quot;&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 找到用户名和密码输入框，模拟输入</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">usernameInput</span><span style="color:#000000;"> = </span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementsByName</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;username&#39;</span><span style="color:#000000;">)[</span><span style="color:#098658;">0</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">passwordInput</span><span style="color:#000000;"> = </span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementsByName</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;password&#39;</span><span style="color:#000000;">)[</span><span style="color:#098658;">0</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">fireEvent</span><span style="color:#000000;">.</span><span style="color:#795E26;">change</span><span style="color:#000000;">(</span><span style="color:#001080;">usernameInput</span><span style="color:#000000;">, { </span><span style="color:#001080;">target:</span><span style="color:#000000;"> { </span><span style="color:#001080;">value:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;testuser&#39;</span><span style="color:#000000;"> } });</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">fireEvent</span><span style="color:#000000;">.</span><span style="color:#795E26;">change</span><span style="color:#000000;">(</span><span style="color:#001080;">passwordInput</span><span style="color:#000000;">, { </span><span style="color:#001080;">target:</span><span style="color:#000000;"> { </span><span style="color:#001080;">value:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;testpass&#39;</span><span style="color:#000000;"> } });</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#795E26;">When</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;I click the login button&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 找到登录按钮，模拟点击</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">loginButton</span><span style="color:#000000;"> = </span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">querySelector</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;button[type=&quot;submit&quot;]&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">fireEvent</span><span style="color:#000000;">.</span><span style="color:#795E26;">click</span><span style="color:#000000;">(</span><span style="color:#001080;">loginButton</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#795E26;">Then</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;I should be redirected to my account page&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 断言页面是否重定向到正确的URL</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">window</span><span style="color:#000000;">.</span><span style="color:#001080;">location</span><span style="color:#000000;">.</span><span style="color:#001080;">href</span><span style="color:#000000;">).</span><span style="color:#795E26;">toContain</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/account&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><p>通过这种方式，可以将业务逻辑以自然语言的形式描述出来，使非技术人员也能理解测试的目的和场景，同时利用 Jest 强大的断言和测试功能实现具体的测试逻辑。</p>`,57),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const B=s(l,[["render",t]]);export{d as __pageData,B as default};
