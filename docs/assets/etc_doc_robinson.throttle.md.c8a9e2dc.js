import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.80c893c1.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.throttle.md","filePath":"etc/doc/robinson.throttle.md"}'),t={name:"etc/doc/robinson.throttle.md"},l=o(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.throttle.html">throttle</a></p><h2 id="throttle-function" tabindex="-1">throttle() function <a class="header-anchor" href="#throttle-function" aria-label="Permalink to &quot;throttle() function&quot;">​</a></h2><p><code>throttle</code> 函数是节流机制的 TypeScript 实现，它限制函数调用的速率。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throttle</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">immediate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">leading</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">trailing</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">throttle</span><span style="color:#000000;">(</span><span style="color:#795E26;">fn</span><span style="color:#000000;">: </span><span style="color:#267F99;">Function</span><span style="color:#000000;">, </span><span style="color:#001080;">immediate</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">, </span><span style="color:#001080;">leading</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">, </span><span style="color:#001080;">trailing</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">): {</span></span>
<span class="line"><span style="color:#000000;">    (...</span><span style="color:#001080;">args</span><span style="color:#000000;">: </span><span style="color:#267F99;">any</span><span style="color:#000000;">): </span><span style="color:#267F99;">Promise</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">unknown</span><span style="color:#000000;">&gt;;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">cancel</span><span style="color:#000000;">(): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>fn</td><td>Function</td><td>“fn”参数是您想要限制的函数。该函数在指定的时间间隔内最多被调用一次。</td></tr><tr><td>immediate</td><td>number</td><td>“immediate”参数是函数调用之间的最小时间间隔（以毫秒为单位）。如果在此间隔内发生另一次调用，该函数将受到限制并且不会立即执行。</td></tr><tr><td>leading</td><td>boolean</td><td><em>(Optional)</em> “leading”参数决定该函数是在调用时立即执行还是等待指定的“immediate”时间过去后才第一次执行该函数。 如果“leading”设置为“true”，该函数将立即执行。如果“leading”设置为</td></tr><tr><td>trailing</td><td>boolean</td><td><em>(Optional)</em> “trailing”参数是一个布尔值，用于确定是否应在上次调用后立即调用节流函数，即使指定的时间间隔（“immediate”）尚未过去。 如果“trailing”设置为“true”，则该函数将在指定的时间之后调用一次</td></tr></tbody></table><p><strong>Returns:</strong></p><p>{ (...args: any): Promise&lt;unknown&gt;; cancel(): void; }</p><p>正在返回函数“throttle”。</p>`,10),e=[l];function p(r,c,i,y,d,E){return n(),a("div",null,e)}const m=s(t,[["render",p]]);export{h as __pageData,m as default};
