import{_ as e,o as t,c as r,Q as a}from"./chunks/framework.a333c6fb.js";const m=JSON.parse('{"title":"处理循环依赖","description":"","frontmatter":{},"headers":[],"relativePath":"etc/rollup/src/circularDev.md","filePath":"etc/rollup/src/circularDev.md","lastUpdated":1738049586000}'),o={name:"etc/rollup/src/circularDev.md"},c=a('<h1 id="处理循环依赖" tabindex="-1">处理循环依赖 <a class="header-anchor" href="#处理循环依赖" aria-label="Permalink to &quot;处理循环依赖&quot;">​</a></h1><p>。Rollup 通过静态分析来解析模块之间的依赖关系，并在打包过程中自动处理循环依赖。</p><ul><li><strong>避免无限递归</strong>：虽然 Rollup 能够处理循环依赖，但在编写代码时仍需注意避免无限递归的情况。例如，在上面的示例中，如果 <code>a</code> 和 <code>b</code> 函数互相调用且没有终止条件，可能会导致栈溢出。</li><li><strong>模块设计</strong>：在设计模块时，尽量避免循环依赖。虽然 Rollup 能够处理，但循环依赖可能会增加代码的复杂性和维护难度。</li></ul>',3),l=[c];function s(_,i,n,d,p,u){return t(),r("div",null,l)}const f=e(o,[["render",s]]);export{m as __pageData,f as default};
