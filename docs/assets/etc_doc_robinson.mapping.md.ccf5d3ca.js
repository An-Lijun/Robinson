import{_ as a,o as s,c as t,Q as n}from"./chunks/framework.a7175731.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.mapping.md","filePath":"etc/doc/robinson.mapping.md"}'),p={name:"etc/doc/robinson.mapping.md"},e=n('<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.mapping.html">mapping</a></p><h2 id="mapping-function" tabindex="-1">mapping() function <a class="header-anchor" href="#mapping-function" aria-label="Permalink to &quot;mapping() function&quot;">​</a></h2><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">enumData</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enumData</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">expty</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">result</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">mapping</span><span style="color:#000000;">(</span><span style="color:#001080;">enumData</span><span style="color:#000000;">: </span><span style="color:#267F99;">enumData</span><span style="color:#000000;">, </span><span style="color:#001080;">options</span><span style="color:#000000;">: </span><span style="color:#267F99;">options</span><span style="color:#000000;">, </span><span style="color:#001080;">expty</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">): </span><span style="color:#267F99;">result</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>enumData</td><td>enumData</td><td>Object||Array</td></tr><tr><td>options</td><td>options</td><td>Object ||Stirng</td></tr><tr><td>expty</td><td>string</td><td><em>(Optional)</em> String ||Number</td></tr></tbody></table><p><strong>Returns:</strong></p><p>result</p><p>Object || String</p><p>注意这里是一个映射函数可以将数据进行枚举映射</p><p>当枚举是Array[Object]类型时 options必须传递对象 此时options 需要传递 options.key 要寻找的数组对象中某一个唯一key options.keyValue 要寻找的数组对象中某一个唯一key 的值 options.label 当type是value 时返回寻找的对象中的label对应的值 options.type 返回的枚举类型 如: let enum1 = [{value:&#39;USD&#39;,label:&#39;美元&#39;},{value:&#39;AUD&#39;,label:&#39;澳大利亚元&#39;}]</p><p>mapping(enum1,{key:&#39;value&#39;,keyValue:&#39;USD&#39;,label:&#39;label&#39;,type:&#39;object&#39;}) //{value:&#39;USD&#39;,label:&#39;美元&#39;} mapping(enum1,{key:&#39;value&#39;,keyValue:&#39;USD&#39;,label:&#39;label&#39;,type:&#39;value&#39;}) //美元</p><p>当枚举数据是Object时 此时 options 需要填写String</p><p>如果枚举中寻找不到 那么返回 第三个参数expty 默认值为 &#39;--&#39;</p>',14),o=[e];function l(r,c,i,y,d,m){return s(),t("div",null,o)}const g=a(p,[["render",l]]);export{E as __pageData,g as default};
