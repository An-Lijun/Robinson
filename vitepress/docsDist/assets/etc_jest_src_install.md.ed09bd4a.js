import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.a333c6fb.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/jest/src/install.md","filePath":"etc/jest/src/install.md","lastUpdated":1738049586000}'),l={name:"etc/jest/src/install.md"},p=e(`<h2 id="三、安装与配置" tabindex="-1">三、安装与配置 <a class="header-anchor" href="#三、安装与配置" aria-label="Permalink to &quot;三、安装与配置&quot;">​</a></h2><h3 id="_3-1-环境要求" tabindex="-1">3.1 环境要求 <a class="header-anchor" href="#_3-1-环境要求" aria-label="Permalink to &quot;3.1 环境要求&quot;">​</a></h3><p>在安装 Jest 之前，确保你的开发环境满足以下要求：</p><ul><li><strong>Node.js</strong>：Jest 是基于 Node.js 运行的，因此需要安装 Node.js 环境。建议使用 Node.js 的长期支持版本（LTS）。</li></ul><ul><li><strong>npm 或 yarn</strong>：用于安装 Jest 及其依赖包。</li></ul><h3 id="_3-2-安装方式" tabindex="-1">3.2 安装方式 <a class="header-anchor" href="#_3-2-安装方式" aria-label="Permalink to &quot;3.2 安装方式&quot;">​</a></h3><ul><li><strong>全局安装</strong>：通过 npm 或 yarn 全局安装 Jest，可以在任何项目中使用 Jest 命令。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install -g jest</span></span>
<span class="line"><span style="color:#e1e4e8;"># 或者</span></span>
<span class="line"><span style="color:#e1e4e8;">yarn global add jest</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">npm install -g jest</span></span>
<span class="line"><span style="color:#000000;"># 或者</span></span>
<span class="line"><span style="color:#000000;">yarn global add jest</span></span></code></pre></div><ul><li><strong>项目内安装</strong>：在项目根目录下安装 Jest，将其作为开发依赖项。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install --save-dev jest</span></span>
<span class="line"><span style="color:#e1e4e8;"># 或者</span></span>
<span class="line"><span style="color:#e1e4e8;">yarn add --dev jest</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">npm install --save-dev jest</span></span>
<span class="line"><span style="color:#000000;"># 或者</span></span>
<span class="line"><span style="color:#000000;">yarn add --dev jest</span></span></code></pre></div><h3 id="_3-3-配置文件" tabindex="-1">3.3 配置文件 <a class="header-anchor" href="#_3-3-配置文件" aria-label="Permalink to &quot;3.3 配置文件&quot;">​</a></h3><p>Jest 的配置文件通常为jest.config.js，位于项目根目录下。以下是一些常见的配置项：</p><ul><li><strong>testMatch</strong>：指定测试文件的匹配模式，默认值为[&quot;<strong>/<strong>tests</strong>/</strong>/<em>.js?(x)&quot;, &quot;**/?(</em>.)+(spec|test).js?(x)&quot;]。</li></ul><ul><li><strong>coveragePathIgnorePatterns</strong>：指定哪些文件不生成测试覆盖率报告，例如[&quot;/node_modules/&quot;]。</li></ul><ul><li><strong>moduleNameMapper</strong>：用于模块路径映射，例如将@/映射到项目的src/目录。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">module.exports = {</span></span>
<span class="line"><span style="color:#e1e4e8;">    testMatch: [&quot;**/*.test.js&quot;],</span></span>
<span class="line"><span style="color:#e1e4e8;">    coveragePathIgnorePatterns: [&quot;/node_modules/&quot;],</span></span>
<span class="line"><span style="color:#e1e4e8;">    moduleNameMapper: {</span></span>
<span class="line"><span style="color:#e1e4e8;">        &quot;^@/(.*)$&quot;: &quot;&lt;rootDir&gt;/src/$1&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">module.exports = {</span></span>
<span class="line"><span style="color:#000000;">    testMatch: [&quot;**/*.test.js&quot;],</span></span>
<span class="line"><span style="color:#000000;">    coveragePathIgnorePatterns: [&quot;/node_modules/&quot;],</span></span>
<span class="line"><span style="color:#000000;">    moduleNameMapper: {</span></span>
<span class="line"><span style="color:#000000;">        &quot;^@/(.*)$&quot;: &quot;&lt;rootDir&gt;/src/$1&quot;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h3 id="_3-4-自定义配置" tabindex="-1">3.4 自定义配置 <a class="header-anchor" href="#_3-4-自定义配置" aria-label="Permalink to &quot;3.4 自定义配置&quot;">​</a></h3><p>除了上述常见配置项，Jest 还支持许多其他配置选项，如测试环境、测试脚本、模拟函数的配置等。开发者可以根据项目的具体需求进行自定义配置，以满足不同的测试场景。</p><h2 id="四、基本使用" tabindex="-1">四、基本使用 <a class="header-anchor" href="#四、基本使用" aria-label="Permalink to &quot;四、基本使用&quot;">​</a></h2><h3 id="_4-1-测试文件命名规则" tabindex="-1">4.1 测试文件命名规则 <a class="header-anchor" href="#_4-1-测试文件命名规则" aria-label="Permalink to &quot;4.1 测试文件命名规则&quot;">​</a></h3><p>Jest 默认会查找符合特定命名规则的测试文件，常见的命名规则为[文件名].test.js或[文件名].spec.js。例如，要测试math.js文件，可创建math.test.js或math.spec.js。</p><h3 id="_4-2-编写测试用例" tabindex="-1">4.2 编写测试用例 <a class="header-anchor" href="#_4-2-编写测试用例" aria-label="Permalink to &quot;4.2 编写测试用例&quot;">​</a></h3><ul><li><strong>测试函数</strong>：使用test函数来定义一个测试用例，test函数接受两个参数：测试用例的描述和测试函数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;adds 1 + 2 to equal 3&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 测试逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;adds 1 + 2 to equal 3&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 测试逻辑</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><ul><li><strong>断言函数</strong>：使用expect函数来进行断言，expect函数接受一个实际值，然后通过调用各种匹配器（如toBe、toEqual等）来判断实际值是否符合预期。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">function add(a, b) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    return a + b;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;">test(&#39;adds 1 + 2 to equal 3&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">    expect(add(1, 2)).toBe(3);</span></span>
<span class="line"><span style="color:#e1e4e8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">function add(a, b) {</span></span>
<span class="line"><span style="color:#000000;">    return a + b;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#000000;">test(&#39;adds 1 + 2 to equal 3&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#000000;">    expect(add(1, 2)).toBe(3);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h3 id="_4-3-运行测试" tabindex="-1">4.3 运行测试 <a class="header-anchor" href="#_4-3-运行测试" aria-label="Permalink to &quot;4.3 运行测试&quot;">​</a></h3><p>在项目根目录下，通过命令行运行测试：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"><span style="color:#6A737D;"># 或者</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">npm</span><span style="color:#000000;"> </span><span style="color:#A31515;">test</span></span>
<span class="line"><span style="color:#008000;"># 或者</span></span>
<span class="line"><span style="color:#795E26;">yarn</span><span style="color:#000000;"> </span><span style="color:#A31515;">test</span></span></code></pre></div><p>如果安装了全局的 Jest，也可以直接运行jest命令。</p>`,30),t=[p];function o(c,r,i,d,u,h){return a(),n("div",null,t)}const v=s(l,[["render",o]]);export{g as __pageData,v as default};
