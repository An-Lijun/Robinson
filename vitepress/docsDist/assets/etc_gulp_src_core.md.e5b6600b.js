import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a333c6fb.js";const u=JSON.parse('{"title":"核心概念","description":"","frontmatter":{},"headers":[],"relativePath":"etc/gulp/src/core.md","filePath":"etc/gulp/src/core.md","lastUpdated":1738076829000}'),p={name:"etc/gulp/src/core.md"},o=l(`<h1 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h1><h2 id="gulpfile-js" tabindex="-1">Gulpfile.js <a class="header-anchor" href="#gulpfile-js" aria-label="Permalink to &quot;Gulpfile.js&quot;">​</a></h2><p>可以理解为入口文件当执行<code>gulp</code>命令时会被自动加载</p><p>Node 的模块的解析功能允许你将 <code>gulpfile.js</code>&#39; 文件替换为同样命名为 <code>gulpfile.js</code> 的文件夹，该文件夹中包含了一个名为 <code>index.js</code> 的文件，该 <code>index.js</code> 文件将被当作 <code>gulpfile.js</code> 使用。</p><h2 id="task" tabindex="-1">task <a class="header-anchor" href="#task" aria-label="Permalink to &quot;task&quot;">​</a></h2><p>task（任务）是一个异步的 JavaScript 函数，此函数是一个可以接收 callback 作为参数的函数，或者是一个返回 stream、promise、event emitter、child process 或 observable 类型值的函数。</p><h3 id="任务类型" tabindex="-1">任务类型 <a class="header-anchor" href="#任务类型" aria-label="Permalink to &quot;任务类型&quot;">​</a></h3><p>任务（tasks）可以是 <strong>public（公开）</strong>  或 <strong>private（私有）</strong>  类型的。</p><ul><li><strong>公开任务（Public tasks）</strong>  从 gulpfile 中被导出（export），可以通过 <code>gulp</code> 命令直接调用。</li><li><strong>私有任务（Private tasks）</strong>  被设计为在内部使用，通常作为 <code>series()</code> 或 <code>parallel()</code> 组合的组成部分。</li></ul><h3 id="组合任务" tabindex="-1">组合任务 <a class="header-anchor" href="#组合任务" aria-label="Permalink to &quot;组合任务&quot;">​</a></h3><p>Gulp 提供了两个强大的组合方法： <code>series()</code> 和 <code>parallel()</code>，允许将多个独立的任务组合为一个更大的操作。这两个方法都可以接受任意数目的任务（task）函数或已经组合的操作。<code>series()</code> 和 <code>parallel()</code> 可以互相嵌套至任意深度。</p><p>如果需要让任务（task）按顺序执行，请使用 <code>series()</code> 方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// series 顺序执行函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">series</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp&#39;</span><span style="color:#E1E4E8;">);  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transpile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#6A737D;">// body omitted  </span></span>
<span class="line"><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bundle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#6A737D;">// body omitted  </span></span>
<span class="line"><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.build </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">series</span><span style="color:#E1E4E8;">(transpile, bundle);</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#008000;">// series 顺序执行函数</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">series</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp&#39;</span><span style="color:#000000;">);  </span></span>
<span class="line"><span style="color:#000000;">  </span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">transpile</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {  </span></span>
<span class="line"><span style="color:#008000;">// body omitted  </span></span>
<span class="line"><span style="color:#795E26;">cb</span><span style="color:#000000;">();  </span></span>
<span class="line"><span style="color:#000000;">}  </span></span>
<span class="line"><span style="color:#000000;">  </span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">bundle</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {  </span></span>
<span class="line"><span style="color:#008000;">// body omitted  </span></span>
<span class="line"><span style="color:#795E26;">cb</span><span style="color:#000000;">();  </span></span>
<span class="line"><span style="color:#000000;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">build</span><span style="color:#000000;"> = </span><span style="color:#795E26;">series</span><span style="color:#000000;">(</span><span style="color:#001080;">transpile</span><span style="color:#000000;">, </span><span style="color:#001080;">bundle</span><span style="color:#000000;">);</span></span></code></pre></div><p>对于希望以最大并发来运行的任务（tasks），可以使用 <code>parallel()</code> 方法将它们组合起来。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 同时执行</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">parallel</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp&#39;</span><span style="color:#E1E4E8;">);  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">javascript</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#6A737D;">// body omitted  </span></span>
<span class="line"><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">css</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#6A737D;">// body omitted  </span></span>
<span class="line"><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.build </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parallel</span><span style="color:#E1E4E8;">(javascript, css);</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#008000;">// 同时执行</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">parallel</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp&#39;</span><span style="color:#000000;">);  </span></span>
<span class="line"><span style="color:#000000;">  </span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">javascript</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {  </span></span>
<span class="line"><span style="color:#008000;">// body omitted  </span></span>
<span class="line"><span style="color:#795E26;">cb</span><span style="color:#000000;">();  </span></span>
<span class="line"><span style="color:#000000;">}  </span></span>
<span class="line"><span style="color:#000000;">  </span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">css</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {  </span></span>
<span class="line"><span style="color:#008000;">// body omitted  </span></span>
<span class="line"><span style="color:#795E26;">cb</span><span style="color:#000000;">();  </span></span>
<span class="line"><span style="color:#000000;">}  </span></span>
<span class="line"><span style="color:#000000;">  </span></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">build</span><span style="color:#000000;"> = </span><span style="color:#795E26;">parallel</span><span style="color:#000000;">(</span><span style="color:#001080;">javascript</span><span style="color:#000000;">, </span><span style="color:#001080;">css</span><span style="color:#000000;">);</span></span></code></pre></div><h2 id="任务-task-完成通知" tabindex="-1">任务（task）完成通知 <a class="header-anchor" href="#任务-task-完成通知" aria-label="Permalink to &quot;任务（task）完成通知&quot;">​</a></h2><p>当从任务（task）中返回 stream、promise、event emitter、child process 或 observable 时，成功或错误值将通知 gulp 是否继续执行或结束。如果任务（task）出错，gulp 将立即结束执行并显示该错误。</p><p>当使用 <code>series()</code> 组合多个任务（task）时，任何一个任务（task）的错误将导致整个任务组合结束，并且不会进一步执行其他任务。当使用 <code>parallel()</code> 组合多个任务（task）时，一个任务的错误将结束整个任务组合的结束，但是其他并行的任务（task）可能会执行完，也可能没有执行完。</p><h3 id="返回-stream​" tabindex="-1">返回 stream<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-stream" title="Direct link to 返回 stream" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#返回-stream​" aria-label="Permalink to &quot;返回 stream[​](https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-stream &quot;Direct link to 返回 stream&quot;)&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">src</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dest</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">streamTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">dest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;output&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> streamTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">src</span><span style="color:#000000;">, </span><span style="color:#0070C1;">dest</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">streamTask</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">src</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;*.js&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">    .</span><span style="color:#795E26;">pipe</span><span style="color:#000000;">(</span><span style="color:#795E26;">dest</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;output&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">streamTask</span><span style="color:#000000;">;</span></span></code></pre></div><h3 id="返回-promise​" tabindex="-1">返回 promise<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-promise" title="Direct link to 返回 promise" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#返回-promise​" aria-label="Permalink to &quot;返回 promise[​](https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-promise &quot;Direct link to 返回 promise&quot;)&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">promiseTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;the value is ignored&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> promiseTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">promiseTask</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#267F99;">Promise</span><span style="color:#000000;">.</span><span style="color:#795E26;">resolve</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;the value is ignored&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">promiseTask</span><span style="color:#000000;">;</span></span></code></pre></div><h3 id="返回-event-emitter​" tabindex="-1">返回 event emitter<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-event-emitter" title="Direct link to 返回 event emitter" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#返回-event-emitter​" aria-label="Permalink to &quot;返回 event emitter[​](https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-event-emitter &quot;Direct link to 返回 event emitter&quot;)&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">EventEmitter</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;events&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eventEmitterTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">emitter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventEmitter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Emit has to happen async otherwise gulp isn&#39;t listening yet</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> emitter.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;finish&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">250</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> emitter;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eventEmitterTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">EventEmitter</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;events&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">eventEmitterTask</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">emitter</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">new</span><span style="color:#000000;"> </span><span style="color:#795E26;">EventEmitter</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// Emit has to happen async otherwise gulp isn&#39;t listening yet</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#795E26;">setTimeout</span><span style="color:#000000;">(() </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#001080;">emitter</span><span style="color:#000000;">.</span><span style="color:#795E26;">emit</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;finish&#39;</span><span style="color:#000000;">), </span><span style="color:#098658;">250</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#001080;">emitter</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">eventEmitterTask</span><span style="color:#000000;">;</span></span></code></pre></div><h3 id="返回-child-process​" tabindex="-1">返回 child process<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-child-process" title="Direct link to 返回 child process" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#返回-child-process​" aria-label="Permalink to &quot;返回 child process[​](https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-child-process &quot;Direct link to 返回 child process&quot;)&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">exec</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child_process&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">childProcessTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;date&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childProcessTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">exec</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;child_process&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">childProcessTask</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">exec</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;date&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">childProcessTask</span><span style="color:#000000;">;</span></span></code></pre></div><h3 id="返回-observable​" tabindex="-1">返回 observable<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-observable" title="Direct link to 返回 observable" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#返回-observable​" aria-label="Permalink to &quot;返回 observable[​](https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E8%BF%94%E5%9B%9E-observable &quot;Direct link to 返回 observable&quot;)&quot;">​</a></h3><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">Observable</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;rxjs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">observableTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Observable.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> observableTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">Observable</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;rxjs&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">observableTask</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#001080;">Observable</span><span style="color:#000000;">.</span><span style="color:#795E26;">of</span><span style="color:#000000;">(</span><span style="color:#098658;">1</span><span style="color:#000000;">, </span><span style="color:#098658;">2</span><span style="color:#000000;">, </span><span style="color:#098658;">3</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">observableTask</span><span style="color:#000000;">;</span></span></code></pre></div><h3 id="使用-callback​" tabindex="-1">使用 callback<a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E4%BD%BF%E7%94%A8-callback" title="Direct link to 使用 callback" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#使用-callback​" aria-label="Permalink to &quot;使用 callback[​](https://www.gulpjs.com.cn/docs/getting-started/async-completion#%E4%BD%BF%E7%94%A8-callback &quot;Direct link to 使用 callback&quot;)&quot;">​</a></h3><p>如果任务（task）不返回任何内容，则必须使用 callback 来指示任务已完成。在如下示例中，callback 将作为唯一一个名为 <code>cb()</code> 的参数传递给你的任务（task）。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callbackTask</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// \`cb()\` should be called by some async work</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbackTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">callbackTask</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// \`cb()\` should be called by some async work</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#795E26;">cb</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">callbackTask</span><span style="color:#000000;">;</span></span></code></pre></div><p>如需通过 callback 把任务（task）中的错误告知 gulp，请将 <code>Error</code> 作为 callback 的唯一参数。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callbackError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// \`cb()\` should be called by some async work</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;kaboom&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbackError;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">callbackError</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// \`cb()\` should be called by some async work</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#795E26;">cb</span><span style="color:#000000;">(</span><span style="color:#0000FF;">new</span><span style="color:#000000;"> </span><span style="color:#795E26;">Error</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;kaboom&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">callbackError</span><span style="color:#000000;">;</span></span></code></pre></div><p>然而，你通常会将此 callback 函数传递给另一个 API ，而不是自己调用它。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">passingCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fs.</span><span style="color:#B392F0;">access</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulpfile.js&#39;</span><span style="color:#E1E4E8;">, cb);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.default </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> passingCallback;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">fs</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;fs&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">passingCallback</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">fs</span><span style="color:#000000;">.</span><span style="color:#795E26;">access</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulpfile.js&#39;</span><span style="color:#000000;">, </span><span style="color:#001080;">cb</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">default</span><span style="color:#000000;"> = </span><span style="color:#001080;">passingCallback</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="使用-async-await解决异步" tabindex="-1">使用 async/await解决异步 <a class="header-anchor" href="#使用-async-await解决异步" aria-label="Permalink to &quot;使用 async/await解决异步&quot;">​</a></h2><p>如果不使用前面提供到几种方式，你还可以将任务（task）定义为一个 ，它将利用 promise 对你的任务（task）进行包装。这将允许你使用 <code>await</code> 处理 promise，并使用其他同步代码。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">async function asyncAwaitTask() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  const { version } = JSON.parse(fs.readFileSync(&#39;package.json&#39;, &#39;utf8&#39;));</span></span>
<span class="line"><span style="color:#e1e4e8;">  console.log(version);</span></span>
<span class="line"><span style="color:#e1e4e8;">  await Promise.resolve(&#39;some result&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = asyncAwaitTask;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">async function asyncAwaitTask() {</span></span>
<span class="line"><span style="color:#000000;">  const { version } = JSON.parse(fs.readFileSync(&#39;package.json&#39;, &#39;utf8&#39;));</span></span>
<span class="line"><span style="color:#000000;">  console.log(version);</span></span>
<span class="line"><span style="color:#000000;">  await Promise.resolve(&#39;some result&#39;);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = asyncAwaitTask;</span></span></code></pre></div>`,38),e=[o];function c(t,r,y,i,E,d){return a(),n("div",null,e)}const b=s(p,[["render",c]]);export{u as __pageData,b as default};
