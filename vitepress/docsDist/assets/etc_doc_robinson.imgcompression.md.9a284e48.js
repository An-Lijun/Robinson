import{_ as s,o,c as e,Q as a}from"./chunks/framework.a333c6fb.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.imgcompression.md","filePath":"etc/doc/robinson.imgcompression.md","lastUpdated":1737297940000}'),n={name:"etc/doc/robinson.imgcompression.md"},t=a('<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.imgcompression.html">imgCompression</a></p><h2 id="imgcompression-function" tabindex="-1">imgCompression() function <a class="header-anchor" href="#imgcompression-function" aria-label="Permalink to &quot;imgCompression() function&quot;">​</a></h2><blockquote><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></blockquote><p>压缩图片文件</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">imgCompression</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">file</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">size</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt;;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">imgCompression</span><span style="color:#000000;">(</span><span style="color:#001080;">file</span><span style="color:#000000;">: </span><span style="color:#267F99;">File</span><span style="color:#000000;">, </span><span style="color:#001080;">size</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">): </span><span style="color:#267F99;">Promise</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">unknown</span><span style="color:#000000;">&gt;;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>file</td><td>File</td><td>源文件</td></tr><tr><td>size</td><td>number</td><td>指定压缩大小（单位：MB）</td></tr></tbody></table><p><strong>Returns:</strong></p><p>Promise&lt;unknown&gt;</p><p>Promise对象，解析为压缩后的Base64编码字符串</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>imgCompression(fileInput.files[0], 0.5).then(compressedBase64 =&gt; console.log(compressedBase64));</p>',13),p=[t];function r(l,c,i,d,m,y){return o(),e("div",null,p)}const E=s(n,[["render",r]]);export{u as __pageData,E as default};
