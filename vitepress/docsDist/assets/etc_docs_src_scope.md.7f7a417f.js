import{_ as o,o as e,c as t,Q as s}from"./chunks/framework.a333c6fb.js";const S=JSON.parse('{"title":"作用域提升","description":"","frontmatter":{},"headers":[],"relativePath":"etc/docs/src/scope.md","filePath":"etc/docs/src/scope.md","lastUpdated":1737297940000}'),c={name:"etc/docs/src/scope.md"},a=s('<h1 id="作用域提升" tabindex="-1">作用域提升 <a class="header-anchor" href="#作用域提升" aria-label="Permalink to &quot;作用域提升&quot;">​</a></h1><p>作用域提升（Scope Hoisting）是一种优化技术，它通过将模块中的代码尽可能地合并到一个作用域中，从而减少闭包的数量和模块之间的依赖关系。这种优化可以减少打包后的文件大小，并提高代码的执行效率。</p><p>Rollup 通过静态分析模块的依赖关系，将模块中的代码尽可能地合并到一个作用域中。具体来说，Rollup 会分析模块的导入和导出语句，并将这些语句替换为直接的变量引用，从而减少闭包的数量。</p><ul><li><strong>模块格式</strong>：作用域提升主要适用于 ES 模块（ESM），因为 ES 模块的导入和导出是静态的，便于 Rollup 进行静态分析。</li><li><strong>CommonJS 模块</strong>：如果项目中使用了 CommonJS 模块，需要使用 <code>@rollup/plugin-commonjs</code> 插件将其转换为 ES 模块。</li><li><strong>动态导入</strong>：作用域提升不适用于动态导入（<code>import()</code>），因为动态导入的模块在运行时才会加载，Rollup 无法在打包时进行静态分析。</li></ul><p>通过以上配置和注意事项，Rollup 可以有效地进行作用域提升，优化打包后的代码。</p>',5),l=[a];function r(n,p,i,_,d,m){return e(),t("div",null,l)}const h=o(c,[["render",r]]);export{S as __pageData,h as default};
