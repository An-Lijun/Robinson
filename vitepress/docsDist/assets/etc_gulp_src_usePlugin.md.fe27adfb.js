import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a333c6fb.js";const g=JSON.parse('{"title":"使用插件","description":"","frontmatter":{},"headers":[],"relativePath":"etc/gulp/src/usePlugin.md","filePath":"etc/gulp/src/usePlugin.md","lastUpdated":1738076829000}'),p={name:"etc/gulp/src/usePlugin.md"},e=l(`<h1 id="使用插件" tabindex="-1">使用插件 <a class="header-anchor" href="#使用插件" aria-label="Permalink to &quot;使用插件&quot;">​</a></h1><p>Gulp 插件实质上是 <a href="https://github.com/rvagg/through2" target="_blank" rel="noreferrer">Node 转换流（Transform Streams）</a>，它封装了通过管道（pipeline）转换文件的常见功能，通常是使用 <code>.pipe()</code> 方法并放在 <code>src()</code> 和 <code>dest()</code> 之间。他们可以更改经过流（stream）的每个文件的文件名、元数据或文件内容。</p><p>托管在 npm 上的插件 - 标记有 &quot;gulpplugin&quot; 和 &quot;gulpfriendly&quot; 关键词 - 可以在 <a href="https://gulpjs.com/plugins/" target="_blank" rel="noreferrer">插件搜索页面</a> 上浏览和搜索。</p><p>每个插件应当只完成必要的工作，因此你可以把它们像构建块一样连接在一起。获得想要的结果可能需要把一组插件组合在一起使用。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const { src, dest } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">const uglify = require(&#39;gulp-uglify&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">const rename = require(&#39;gulp-rename&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = function() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  return src(&#39;src/*.js&#39;)</span></span>
<span class="line"><span style="color:#e1e4e8;">    // gulp-uglify 插件并不改变文件名</span></span>
<span class="line"><span style="color:#e1e4e8;">    .pipe(uglify())</span></span>
<span class="line"><span style="color:#e1e4e8;">    // 因此使用 gulp-rename 插件修改文件的扩展名</span></span>
<span class="line"><span style="color:#e1e4e8;">    .pipe(rename({ extname: &#39;.min.js&#39; }))</span></span>
<span class="line"><span style="color:#e1e4e8;">    .pipe(dest(&#39;output/&#39;));</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const { src, dest } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#000000;">const uglify = require(&#39;gulp-uglify&#39;);</span></span>
<span class="line"><span style="color:#000000;">const rename = require(&#39;gulp-rename&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = function() {</span></span>
<span class="line"><span style="color:#000000;">  return src(&#39;src/*.js&#39;)</span></span>
<span class="line"><span style="color:#000000;">    // gulp-uglify 插件并不改变文件名</span></span>
<span class="line"><span style="color:#000000;">    .pipe(uglify())</span></span>
<span class="line"><span style="color:#000000;">    // 因此使用 gulp-rename 插件修改文件的扩展名</span></span>
<span class="line"><span style="color:#000000;">    .pipe(rename({ extname: &#39;.min.js&#39; }))</span></span>
<span class="line"><span style="color:#000000;">    .pipe(dest(&#39;output/&#39;));</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h2 id="是否需要插件-​" tabindex="-1">是否需要插件？<a href="https://www.gulpjs.com.cn/docs/getting-started/using-plugins#%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%8F%92%E4%BB%B6" title="Direct link to 是否需要插件？" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#是否需要插件-​" aria-label="Permalink to &quot;是否需要插件？[​](https://www.gulpjs.com.cn/docs/getting-started/using-plugins#%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%8F%92%E4%BB%B6 &quot;Direct link to 是否需要插件？&quot;)&quot;">​</a></h2><p>并非 gulp 中的一切都需要用插件来完成。虽然它们是一种快速上手的方法，但许多操作都应当通过使用独立的功能模块或库来实现。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">rollup</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;rollup&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Rollup 提供了基于 promise 的 API，在 \`async\` 任务（task）中工作的很好</span></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bundle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollup</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;output/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;iife&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">rollup</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;rollup&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// Rollup 提供了基于 promise 的 API，在 \`async\` 任务（task）中工作的很好</span></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#795E26;">default</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">async</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">bundle</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">await</span><span style="color:#000000;"> </span><span style="color:#795E26;">rollup</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/index.js&#39;</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#001080;">bundle</span><span style="color:#000000;">.</span><span style="color:#795E26;">write</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;output/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;iife&#39;</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><p>插件应当总是用来转换文件的。其他操作都应该使用（非插件的） Node 模块或库来实现。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">del</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;delete&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 直接使用 \`delete\` 模块，避免使用 gulp-rimraf 插件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">del</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;output/*.js&#39;</span><span style="color:#E1E4E8;">], cb);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">del</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;delete&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#795E26;">default</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;">(</span><span style="color:#001080;">cb</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// 直接使用 \`delete\` 模块，避免使用 gulp-rimraf 插件</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#795E26;">del</span><span style="color:#000000;">([</span><span style="color:#A31515;">&#39;output/*.js&#39;</span><span style="color:#000000;">], </span><span style="color:#001080;">cb</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h2 id="条件插件​" tabindex="-1">条件插件<a href="https://www.gulpjs.com.cn/docs/getting-started/using-plugins#%E6%9D%A1%E4%BB%B6%E6%8F%92%E4%BB%B6" title="Direct link to 条件插件" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#条件插件​" aria-label="Permalink to &quot;条件插件[​](https://www.gulpjs.com.cn/docs/getting-started/using-plugins#%E6%9D%A1%E4%BB%B6%E6%8F%92%E4%BB%B6 &quot;Direct link to 条件插件&quot;)&quot;">​</a></h2><p>因为插件的操作不应该针对特定文件类型，因此你可能需要使用像 <a href="https://www.npmjs.com/package/gulp-if" target="_blank" rel="noreferrer">gulp-if</a> 之类的插件来完成转换某些文件的操作。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">src</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dest</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gulpif</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp-if&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uglify</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp-uglify&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isJavaScript</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断文件的扩展名是否是 &#39;.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> file.extname </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在同一个管道（pipeline）上处理 JavaScript 和 CSS 文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;src/*.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;src/*.css&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 只对 JavaScript 文件应用 gulp-uglify 插件</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">gulpif</span><span style="color:#E1E4E8;">(isJavaScript, </span><span style="color:#B392F0;">uglify</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">dest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;output/&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">src</span><span style="color:#000000;">, </span><span style="color:#0070C1;">dest</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">gulpif</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp-if&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">uglify</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp-uglify&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">isJavaScript</span><span style="color:#000000;">(</span><span style="color:#001080;">file</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// 判断文件的扩展名是否是 &#39;.js&#39;</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#001080;">file</span><span style="color:#000000;">.</span><span style="color:#001080;">extname</span><span style="color:#000000;"> === </span><span style="color:#A31515;">&#39;.js&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#795E26;">default</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#008000;">// 在同一个管道（pipeline）上处理 JavaScript 和 CSS 文件</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">src</span><span style="color:#000000;">([</span><span style="color:#A31515;">&#39;src/*.js&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;src/*.css&#39;</span><span style="color:#000000;">])</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 只对 JavaScript 文件应用 gulp-uglify 插件</span></span>
<span class="line"><span style="color:#000000;">    .</span><span style="color:#795E26;">pipe</span><span style="color:#000000;">(</span><span style="color:#795E26;">gulpif</span><span style="color:#000000;">(</span><span style="color:#001080;">isJavaScript</span><span style="color:#000000;">, </span><span style="color:#795E26;">uglify</span><span style="color:#000000;">()))</span></span>
<span class="line"><span style="color:#000000;">    .</span><span style="color:#795E26;">pipe</span><span style="color:#000000;">(</span><span style="color:#795E26;">dest</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;output/&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h2 id="内联插件-inline-plugins-​" tabindex="-1">内联插件（Inline plugins）<a href="https://www.gulpjs.com.cn/docs/getting-started/using-plugins#%E5%86%85%E8%81%94%E6%8F%92%E4%BB%B6inline-plugins" title="Direct link to 内联插件（Inline plugins）" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#内联插件-inline-plugins-​" aria-label="Permalink to &quot;内联插件（Inline plugins）[​](https://www.gulpjs.com.cn/docs/getting-started/using-plugins#%E5%86%85%E8%81%94%E6%8F%92%E4%BB%B6inline-plugins &quot;Direct link to 内联插件（Inline plugins）&quot;)&quot;">​</a></h2><p>内联插件是一次性的转换流（Transform Streams），你可以通过在 gulpfile 文件直接书写需要的功能。</p><p>在两种情况下，创建内联插件很有用：</p><ul><li>避免自己创建并维护插件。</li><li>避免 fork 一个已经存在的插件并添加自己所需的功能。</li></ul><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">src</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dest</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gulp&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uglify</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;uglify-js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">through2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;through2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;src/*.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个内联插件，从而避免使用 gulp-uglify 插件</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(through2.</span><span style="color:#B392F0;">obj</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (file.</span><span style="color:#B392F0;">isBuffer</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> uglify.</span><span style="color:#B392F0;">minify</span><span style="color:#E1E4E8;">(file.contents.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        file.contents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(code.code)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, file);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">dest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;output/&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">src</span><span style="color:#000000;">, </span><span style="color:#0070C1;">dest</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;gulp&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">uglify</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;uglify-js&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">through2</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;through2&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#795E26;">default</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#795E26;">src</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;src/*.js&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#008000;">// 创建一个内联插件，从而避免使用 gulp-uglify 插件</span></span>
<span class="line"><span style="color:#000000;">    .</span><span style="color:#795E26;">pipe</span><span style="color:#000000;">(</span><span style="color:#001080;">through2</span><span style="color:#000000;">.</span><span style="color:#795E26;">obj</span><span style="color:#000000;">(</span><span style="color:#0000FF;">function</span><span style="color:#000000;">(</span><span style="color:#001080;">file</span><span style="color:#000000;">, </span><span style="color:#001080;">_</span><span style="color:#000000;">, </span><span style="color:#001080;">cb</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">file</span><span style="color:#000000;">.</span><span style="color:#795E26;">isBuffer</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">code</span><span style="color:#000000;"> = </span><span style="color:#001080;">uglify</span><span style="color:#000000;">.</span><span style="color:#795E26;">minify</span><span style="color:#000000;">(</span><span style="color:#001080;">file</span><span style="color:#000000;">.</span><span style="color:#001080;">contents</span><span style="color:#000000;">.</span><span style="color:#795E26;">toString</span><span style="color:#000000;">())</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">file</span><span style="color:#000000;">.</span><span style="color:#001080;">contents</span><span style="color:#000000;"> = </span><span style="color:#001080;">Buffer</span><span style="color:#000000;">.</span><span style="color:#795E26;">from</span><span style="color:#000000;">(</span><span style="color:#001080;">code</span><span style="color:#000000;">.</span><span style="color:#001080;">code</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#795E26;">cb</span><span style="color:#000000;">(</span><span style="color:#0000FF;">null</span><span style="color:#000000;">, </span><span style="color:#001080;">file</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }))</span></span>
<span class="line"><span style="color:#000000;">    .</span><span style="color:#795E26;">pipe</span><span style="color:#000000;">(</span><span style="color:#795E26;">dest</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;output/&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h1 id="文件监控" tabindex="-1">文件监控 <a class="header-anchor" href="#文件监控" aria-label="Permalink to &quot;文件监控&quot;">​</a></h1><p>gulp api 中的 <code>watch()</code> 方法利用文件系统的监控程序（file system watcher）将 <a href="https://www.gulpjs.com.cn/docs/getting-started/explaining-globs" target="_blank" rel="noreferrer">globs</a> 与 <a href="https://www.gulpjs.com.cn/docs/getting-started/creating-tasks" target="_blank" rel="noreferrer">任务（task）</a> 进行关联。它对匹配 glob 的文件进行监控，如果有文件被修改了就执行关联的任务（task）。如果被执行的任务（task）没有触发 <a href="https://www.gulpjs.com.cn/docs/getting-started/async-completion" target="_blank" rel="noreferrer">异步完成</a> 信号，它将永远不会再次运行了。</p><p>此 API 的默认设置是基于通常的使用场景的，而且提供了内置的延迟和排队机制。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const { watch, series } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">function clean(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">  cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">function javascript(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">  cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">function css(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">  cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = function() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 你可以使用单个任务</span></span>
<span class="line"><span style="color:#e1e4e8;">  watch(&#39;src/*.css&#39;, css);</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 也可以组合多个任务</span></span>
<span class="line"><span style="color:#e1e4e8;">  watch(&#39;src/*.js&#39;, series(clean, javascript));</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const { watch, series } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">function clean(cb) {</span></span>
<span class="line"><span style="color:#000000;">  // body omitted</span></span>
<span class="line"><span style="color:#000000;">  cb();</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">function javascript(cb) {</span></span>
<span class="line"><span style="color:#000000;">  // body omitted</span></span>
<span class="line"><span style="color:#000000;">  cb();</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">function css(cb) {</span></span>
<span class="line"><span style="color:#000000;">  // body omitted</span></span>
<span class="line"><span style="color:#000000;">  cb();</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = function() {</span></span>
<span class="line"><span style="color:#000000;">  // 你可以使用单个任务</span></span>
<span class="line"><span style="color:#000000;">  watch(&#39;src/*.css&#39;, css);</span></span>
<span class="line"><span style="color:#000000;">  // 也可以组合多个任务</span></span>
<span class="line"><span style="color:#000000;">  watch(&#39;src/*.js&#39;, series(clean, javascript));</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="警告-避免同步任务​" tabindex="-1">警告：避免同步任务<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E8%AD%A6%E5%91%8A%E9%81%BF%E5%85%8D%E5%90%8C%E6%AD%A5%E4%BB%BB%E5%8A%A1" title="Direct link to 警告：避免同步任务" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#警告-避免同步任务​" aria-label="Permalink to &quot;警告：避免同步任务[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E8%AD%A6%E5%91%8A%E9%81%BF%E5%85%8D%E5%90%8C%E6%AD%A5%E4%BB%BB%E5%8A%A1 &quot;Direct link to 警告：避免同步任务&quot;)&quot;">​</a></h2><p>就像注册到任务系统中的任务（task）一样，与文件监控程序关联的任务（task）不能是同步任务（synchronous taks）。如果你将同步任务（task）关联到监控程序，则无法确定任务（task）的完成情况，任务（task）将不会再次运行（假定当前正在运行）。</p><p>由于文件监控程序会让你的 Node 进程保持持续运行，因此不会有错误或警告产生。由于进程没有退出，因此无法确定任务（task）是否已经完成还是运行了很久很久了。</p><h2 id="可监控的事件​" tabindex="-1">可监控的事件<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%8F%AF%E7%9B%91%E6%8E%A7%E7%9A%84%E4%BA%8B%E4%BB%B6" title="Direct link to 可监控的事件" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#可监控的事件​" aria-label="Permalink to &quot;可监控的事件[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%8F%AF%E7%9B%91%E6%8E%A7%E7%9A%84%E4%BA%8B%E4%BB%B6 &quot;Direct link to 可监控的事件&quot;)&quot;">​</a></h2><p>默认情况下，只要创建、更改或删除文件，文件监控程序就会执行关联的任务（task）。 如果你需要使用不同的事件，你可以在调用 <code>watch()</code> 方法时通过 <code>events</code> 参数进行指定。可用的事件有 <code>&#39;add&#39;</code>、<code>&#39;addDir&#39;</code>、<code>&#39;change&#39;</code>、<code>&#39;unlink&#39;</code>、<code>&#39;unlinkDir&#39;</code>、<code>&#39;ready&#39;</code>、<code>&#39;error&#39;</code>。此外，还有一个 <code>&#39;all&#39;</code> 事件，它表示除 <code>&#39;ready&#39;</code> 和 <code>&#39;error&#39;</code> 之外的所有事件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = function() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 所有事件都将被监控</span></span>
<span class="line"><span style="color:#e1e4e8;">  watch(&#39;src/*.js&#39;, { events: &#39;all&#39; }, function(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">    cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">  });</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = function() {</span></span>
<span class="line"><span style="color:#000000;">  // 所有事件都将被监控</span></span>
<span class="line"><span style="color:#000000;">  watch(&#39;src/*.js&#39;, { events: &#39;all&#39; }, function(cb) {</span></span>
<span class="line"><span style="color:#000000;">    // body omitted</span></span>
<span class="line"><span style="color:#000000;">    cb();</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="初次执行​" tabindex="-1">初次执行<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%88%9D%E6%AC%A1%E6%89%A7%E8%A1%8C" title="Direct link to 初次执行" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#初次执行​" aria-label="Permalink to &quot;初次执行[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%88%9D%E6%AC%A1%E6%89%A7%E8%A1%8C &quot;Direct link to 初次执行&quot;)&quot;">​</a></h2><p>调用 <code>watch()</code> 之后，关联的任务（task）是不会被立即执行的，而是要等到第一次文件修之后才执行。</p><p>如需在第一次文件修改之前执行，也就是调用 <code>watch()</code> 之后立即执行，请将 <code>ignoreInitial</code> 参数设置为 <code>false</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = function() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 任务将在启动时执行</span></span>
<span class="line"><span style="color:#e1e4e8;">  watch(&#39;src/*.js&#39;, { ignoreInitial: false }, function(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">    cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">  });</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = function() {</span></span>
<span class="line"><span style="color:#000000;">  // 任务将在启动时执行</span></span>
<span class="line"><span style="color:#000000;">  watch(&#39;src/*.js&#39;, { ignoreInitial: false }, function(cb) {</span></span>
<span class="line"><span style="color:#000000;">    // body omitted</span></span>
<span class="line"><span style="color:#000000;">    cb();</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="队列​" tabindex="-1">队列<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E9%98%9F%E5%88%97" title="Direct link to 队列" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#队列​" aria-label="Permalink to &quot;队列[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E9%98%9F%E5%88%97 &quot;Direct link to 队列&quot;)&quot;">​</a></h2><p><code>watch()</code> 方法能够保证当前执行的任务（task）不会再次并发执行。当文件监控程序关联的任务（task）正在运行时又有文件被修改了，那么所关联任务的这次新的执行将被放到执行队列中等待，直到上一次关联任务执行完之后才能运行。每一次文件修改只产生一次关联任务的执行并放入队列中。</p><p>如需禁止队列，请将 <code>queue</code> 参数设置为 <code>false</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = function() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 每次文件修改之后关联任务都将（并发）执行</span></span>
<span class="line"><span style="color:#e1e4e8;">  watch(&#39;src/*.js&#39;, { queue: false }, function(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">    cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">  });</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = function() {</span></span>
<span class="line"><span style="color:#000000;">  // 每次文件修改之后关联任务都将（并发）执行</span></span>
<span class="line"><span style="color:#000000;">  watch(&#39;src/*.js&#39;, { queue: false }, function(cb) {</span></span>
<span class="line"><span style="color:#000000;">    // body omitted</span></span>
<span class="line"><span style="color:#000000;">    cb();</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="延迟​" tabindex="-1">延迟<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%BB%B6%E8%BF%9F" title="Direct link to 延迟" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#延迟​" aria-label="Permalink to &quot;延迟[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%BB%B6%E8%BF%9F &quot;Direct link to 延迟&quot;)&quot;">​</a></h2><p>文件更改之后，只有经过 200 毫秒的延迟之后，文件监控程序所关联的任务（task）才会被执行。这是为了避免在同使更改许多文件时（例如查找和替换操作）过早启动任务（taks）的执行。</p><p>如需调整延迟时间，请为 <code>delay</code> 参数设置一个正整数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">exports.default = function() {</span></span>
<span class="line"><span style="color:#e1e4e8;">  // 文件第一次修改之后要等待 500 毫秒才执行关联的任务</span></span>
<span class="line"><span style="color:#e1e4e8;">  watch(&#39;src/*.js&#39;, { delay: 500 }, function(cb) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    // body omitted</span></span>
<span class="line"><span style="color:#e1e4e8;">    cb();</span></span>
<span class="line"><span style="color:#e1e4e8;">  });</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">const { watch } = require(&#39;gulp&#39;);</span></span>
<span class="line"><span style="color:#000000;"></span></span>
<span class="line"><span style="color:#000000;">exports.default = function() {</span></span>
<span class="line"><span style="color:#000000;">  // 文件第一次修改之后要等待 500 毫秒才执行关联的任务</span></span>
<span class="line"><span style="color:#000000;">  watch(&#39;src/*.js&#39;, { delay: 500 }, function(cb) {</span></span>
<span class="line"><span style="color:#000000;">    // body omitted</span></span>
<span class="line"><span style="color:#000000;">    cb();</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="使用监控程序实例​" tabindex="-1">使用监控程序实例<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E4%BD%BF%E7%94%A8%E7%9B%91%E6%8E%A7%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BE%8B" title="Direct link to 使用监控程序实例" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#使用监控程序实例​" aria-label="Permalink to &quot;使用监控程序实例[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E4%BD%BF%E7%94%A8%E7%9B%91%E6%8E%A7%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BE%8B &quot;Direct link to 使用监控程序实例&quot;)&quot;">​</a></h2><p>你可能不会使用到此功能，但是如果你需要对被修改的文件进行完全的掌控 （例如访问文件路径或元数据）请使用从 <code>watch()</code> 返回的 <a href="https://www.npmjs.com/package/chokidar" target="_blank" rel="noreferrer">chokidar</a> 实例。</p><p><strong>注意：</strong>  返回的 chokidar 实例没有队列、延迟和异步完成（async completion）这些功能。</p><h2 id="可选的依赖项​" tabindex="-1">可选的依赖项<a href="https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%8F%AF%E9%80%89%E7%9A%84%E4%BE%9D%E8%B5%96%E9%A1%B9" title="Direct link to 可选的依赖项" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#可选的依赖项​" aria-label="Permalink to &quot;可选的依赖项[​](https://www.gulpjs.com.cn/docs/getting-started/watching-files#%E5%8F%AF%E9%80%89%E7%9A%84%E4%BE%9D%E8%B5%96%E9%A1%B9 &quot;Direct link to 可选的依赖项&quot;)&quot;">​</a></h2><p>Gulp 有一个名为 <a href="https://www.npmjs.com/package/fsevents" target="_blank" rel="noreferrer">fsevents</a> 的可选依赖项，他是一个特定于 Mac 系统的文件监控程序。如果你看到安装 fsevents 时出现的警告信息 -  <em>&quot;npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents&quot;</em>  - 这并不是什么问题，忽略即可。 如果跳过 fsevents 的安装，将使用一个备用文件监控程序，后续在 gulpfile 中产生的任何错误都将与此警告无关。</p>`,45),o=[e];function c(t,r,i,y,E,u){return n(),a("div",null,o)}const h=s(p,[["render",c]]);export{g as __pageData,h as default};
