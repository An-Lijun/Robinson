import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a333c6fb.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/jest/src/mockFun.md","filePath":"etc/jest/src/mockFun.md","lastUpdated":1738049586000}'),o={name:"etc/jest/src/mockFun.md"},p=l(`<h2 id="七、模拟函数-mock-functions" tabindex="-1">七、模拟函数（Mock Functions） <a class="header-anchor" href="#七、模拟函数-mock-functions" aria-label="Permalink to &quot;七、模拟函数（Mock Functions）&quot;">​</a></h2><h3 id="_7-1-创建模拟函数" tabindex="-1">7.1 创建模拟函数 <a class="header-anchor" href="#_7-1-创建模拟函数" aria-label="Permalink to &quot;7.1 创建模拟函数&quot;">​</a></h3><ul><li><strong>jest.fn()</strong> ：使用jest.fn()创建一个模拟函数，模拟函数可以记录调用次数、参数等信息。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mockFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">mockFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(mockFunction).</span><span style="color:#B392F0;">toHaveBeenCalled</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mockFunction</span><span style="color:#000000;"> = </span><span style="color:#001080;">jest</span><span style="color:#000000;">.</span><span style="color:#795E26;">fn</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#795E26;">mockFunction</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">mockFunction</span><span style="color:#000000;">).</span><span style="color:#795E26;">toHaveBeenCalled</span><span style="color:#000000;">();</span></span></code></pre></div><ul><li><strong>自定义返回值</strong>：可以通过mockReturnValue或mockResolvedValue（用于异步函数）来设置模拟函数的返回值。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mockFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jest.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">mockReturnValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mockFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">mockFunction</span><span style="color:#000000;"> = </span><span style="color:#001080;">jest</span><span style="color:#000000;">.</span><span style="color:#795E26;">fn</span><span style="color:#000000;">().</span><span style="color:#795E26;">mockReturnValue</span><span style="color:#000000;">(</span><span style="color:#098658;">42</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">result</span><span style="color:#000000;"> = </span><span style="color:#795E26;">mockFunction</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#001080;">result</span><span style="color:#000000;">).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#098658;">42</span><span style="color:#000000;">);</span></span></code></pre></div><h3 id="_7-2-模拟模块" tabindex="-1">7.2 模拟模块 <a class="header-anchor" href="#_7-2-模拟模块" aria-label="Permalink to &quot;7.2 模拟模块&quot;">​</a></h3><ul><li><strong>jest.mock()</strong> ：使用jest.mock()来自动模拟一个模块，Jest 会自动生成一个模拟模块，其中所有导出的函数都被替换为模拟函数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// module.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">originalFunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;original&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">jest.</span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./module&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">originalFunction</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./module&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mocked function&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    originalFunction.</span><span style="color:#B392F0;">mockReturnValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mocked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">originalFunction</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mocked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#008000;">// module.js</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">originalFunction</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;original&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#008000;">// test.js</span></span>
<span class="line"><span style="color:#001080;">jest</span><span style="color:#000000;">.</span><span style="color:#795E26;">mock</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./module&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">originalFunction</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./module&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mocked function&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">originalFunction</span><span style="color:#000000;">.</span><span style="color:#795E26;">mockReturnValue</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mocked&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#795E26;">originalFunction</span><span style="color:#000000;">()).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mocked&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><ul><li><strong>手动模拟模块</strong>：除了自动模拟，也可以手动创建一个模拟模块，然后通过jest.mock()指定使用该模拟模块。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// __mocks__/module.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">originalFunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#9ECBFF;">&#39;mocked&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#E1E4E8;">jest.</span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./module&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">originalFunction</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./module&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;manually mocked function&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">originalFunction</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mocked&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#008000;">// __mocks__/module.js</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">originalFunction</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#A31515;">&#39;mocked&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#008000;">// test.js</span></span>
<span class="line"><span style="color:#001080;">jest</span><span style="color:#000000;">.</span><span style="color:#795E26;">mock</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./module&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> { </span><span style="color:#0070C1;">originalFunction</span><span style="color:#000000;"> } = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;./module&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">test</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;manually mocked function&#39;</span><span style="color:#000000;">, () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">expect</span><span style="color:#000000;">(</span><span style="color:#795E26;">originalFunction</span><span style="color:#000000;">()).</span><span style="color:#795E26;">toBe</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;mocked&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span></code></pre></div><h3 id="_7-3-模拟函数的使用场景" tabindex="-1">7.3 模拟函数的使用场景 <a class="header-anchor" href="#_7-3-模拟函数的使用场景" aria-label="Permalink to &quot;7.3 模拟函数的使用场景&quot;">​</a></h3><ul><li><strong>隔离测试</strong>：通过模拟依赖项，将测试对象与外部依赖隔离开来，确保测试的独立性和准确性。</li></ul><ul><li><strong>测试异步操作</strong>：模拟异步操作的结果，以便在测试中控制和验证异步行为。</li></ul><ul><li><strong>测试边缘情况</strong>：通过模拟不同的输入和返回值，测试函数在各种边缘情况下的表现。</li></ul>`,15),e=[p];function c(t,r,y,E,i,F){return n(),a("div",null,e)}const m=s(o,[["render",c]]);export{d as __pageData,m as default};
