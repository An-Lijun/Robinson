import{_ as a,o as e,c as o,Q as r}from"./chunks/framework.a333c6fb.js";const m=JSON.parse('{"title":"rollup 优化","description":"","frontmatter":{},"headers":[],"relativePath":"etc/docs/src/more.md","filePath":"etc/docs/src/more.md"}'),l={name:"etc/docs/src/more.md"},t=r('<h1 id="rollup-优化" tabindex="-1">rollup 优化 <a class="header-anchor" href="#rollup-优化" aria-label="Permalink to &quot;rollup 优化&quot;">​</a></h1><h3 id="_1-tree-shaking" tabindex="-1">1. Tree Shaking <a class="header-anchor" href="#_1-tree-shaking" aria-label="Permalink to &quot;1. Tree Shaking&quot;">​</a></h3><p>Tree Shaking 是 Rollup 的核心特性之一，它通过静态分析代码，移除未使用的模块和代码片段。确保在项目中启用 Tree Shaking，可以有效减少最终打包文件的体积。</p><h3 id="_2-代码分割" tabindex="-1">2. 代码分割 <a class="header-anchor" href="#_2-代码分割" aria-label="Permalink to &quot;2. 代码分割&quot;">​</a></h3><p>代码分割可以通过两种方式实现：</p><ul><li><strong>手动分割</strong>：使用 <code>output.manualChunks</code> 配置，将特定模块打包到单独的 chunk 中。</li><li><strong>动态导入</strong>：使用 <code>import()</code> 语法，按需加载模块，减少初始加载时间。</li></ul><h3 id="_3-使用缓存" tabindex="-1">3. 使用缓存 <a class="header-anchor" href="#_3-使用缓存" aria-label="Permalink to &quot;3. 使用缓存&quot;">​</a></h3><p><code>rollup-plugin-cache</code> 插件可以将构建结果缓存到磁盘，避免在每次构建时重新处理未更改的模块，从而提升构建速度。</p><h3 id="_4-并行构建" tabindex="-1">4. 并行构建 <a class="header-anchor" href="#_4-并行构建" aria-label="Permalink to &quot;4. 并行构建&quot;">​</a></h3><p><code>rollup-plugin-parallel</code> 插件可以将构建任务分配到多个 CPU 核心上并行执行，显著提升构建速度，尤其是在处理大型项目时。</p><h3 id="_5-减少插件使用" tabindex="-1">5. 减少插件使用 <a class="header-anchor" href="#_5-减少插件使用" aria-label="Permalink to &quot;5. 减少插件使用&quot;">​</a></h3><p>每个插件都会增加构建过程的复杂度，尤其是那些对构建性能影响较大的插件（如 Babel）。尽量减少插件的使用，或者选择性能更优的替代品。</p><h3 id="_6-优化-rollup-配置" tabindex="-1">6. 优化 Rollup 配置 <a class="header-anchor" href="#_6-优化-rollup-配置" aria-label="Permalink to &quot;6. 优化 Rollup 配置&quot;">​</a></h3><p>通过合理配置 Rollup 的输出选项，可以减少不必要的输出和调试信息。例如，关闭 <code>sourcemap</code> 或选择合适的 <code>output.format</code>，可以提升构建性能。</p><h3 id="_7-使用更快的插件替代品" tabindex="-1">7. 使用更快的插件替代品 <a class="header-anchor" href="#_7-使用更快的插件替代品" aria-label="Permalink to &quot;7. 使用更快的插件替代品&quot;">​</a></h3><p><code>esbuild</code> 是一个极快的 JavaScript 打包工具，可以用它替代 Babel 进行代码转换，显著提升构建速度。</p><h3 id="_8-减少模块解析时间" tabindex="-1">8. 减少模块解析时间 <a class="header-anchor" href="#_8-减少模块解析时间" aria-label="Permalink to &quot;8. 减少模块解析时间&quot;">​</a></h3><p>通过 <code>external</code> 选项将第三方库标记为外部依赖，避免 Rollup 解析这些模块，从而减少构建时间。</p><h3 id="_9-使用增量构建" tabindex="-1">9. 使用增量构建 <a class="header-anchor" href="#_9-使用增量构建" aria-label="Permalink to &quot;9. 使用增量构建&quot;">​</a></h3><p>在开发环境中，结合 <code>rollup-plugin-livereload</code> 或 <code>rollup-plugin-serve</code> 实现增量构建，只重新构建更改的部分，减少每次构建的时间。</p><h3 id="_10-优化依赖管理" tabindex="-1">10. 优化依赖管理 <a class="header-anchor" href="#_10-优化依赖管理" aria-label="Permalink to &quot;10. 优化依赖管理&quot;">​</a></h3><p>使用 <code>pnpm</code> 或 <code>yarn</code> 的 PnP 模式，可以减少依赖安装和解析时间，从而提升整体构建性能。</p>',22),c=[t];function d(i,n,h,p,s,u){return e(),o("div",null,c)}const b=a(l,[["render",d]]);export{m as __pageData,b as default};
