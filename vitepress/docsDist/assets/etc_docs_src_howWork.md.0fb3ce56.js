import{_ as o,o as e,c as l,Q as r}from"./chunks/framework.a333c6fb.js";const k=JSON.parse('{"title":"rollup 插件是怎样工作的","description":"","frontmatter":{},"headers":[],"relativePath":"etc/docs/src/howWork.md","filePath":"etc/docs/src/howWork.md"}'),t={name:"etc/docs/src/howWork.md"},n=r(`<h1 id="rollup-插件是怎样工作的" tabindex="-1">rollup 插件是怎样工作的 <a class="header-anchor" href="#rollup-插件是怎样工作的" aria-label="Permalink to &quot;rollup 插件是怎样工作的&quot;">​</a></h1><p>Rollup 的插件机制通过钩子函数（Hooks）实现，插件可以在 Rollup 构建过程的不同阶段注入自定义逻辑。Rollup 提供了丰富的生命周期钩子，插件可以通过实现这些钩子来扩展 Rollup 的功能。</p><p>注意</p><ul><li>如果你需要在 SCSS 文件中使用 <code>@import</code> 导入其他 SCSS 文件，确保路径正确。</li><li>如果你需要处理 CSS 中的图片或字体等资源，可以结合 <code>rollup-plugin-url</code> 或 <code>rollup-plugin-copy</code> 插件使用。</li></ul><h2 id="插件的基本结构" tabindex="-1">插件的基本结构 <a class="header-anchor" href="#插件的基本结构" aria-label="Permalink to &quot;插件的基本结构&quot;">​</a></h2><p>一个 Rollup 插件通常是一个 JavaScript 对象，包含一个 <code>name</code> 属性和多个钩子函数。例如：</p><pre><code>export default function myPlugin() {
  return {
    name: &#39;my-plugin&#39;,
    transform(code, id) {
      // 自定义转换逻辑
      return code.replace(/foo/g, &#39;bar&#39;);
    }
  };
}
</code></pre><h2 id="钩子函数" tabindex="-1">钩子函数 <a class="header-anchor" href="#钩子函数" aria-label="Permalink to &quot;钩子函数&quot;">​</a></h2><h2 id="构建阶段钩子-build-hooks" tabindex="-1">构建阶段钩子 (Build Hooks) <a class="header-anchor" href="#构建阶段钩子-build-hooks" aria-label="Permalink to &quot;构建阶段钩子 (Build Hooks)&quot;">​</a></h2><ul><li><strong><code>options</code></strong>: 这个钩子允许插件在 Rollup 初始化配置时修改或扩展配置选项。例如，可以在这里添加自定义的输入选项或输出选项。</li><li><strong><code>buildStart</code></strong>: 当 Rollup 开始构建时，这个钩子会被触发。通常用于初始化一些资源或状态。</li><li><strong><code>resolveId</code></strong>: 这个钩子用于解析模块的 ID。插件可以在这里自定义模块的解析逻辑，例如将某些模块重定向到其他路径。</li><li><strong><code>load</code></strong>: 这个钩子用于加载模块的内容。插件可以在这里返回模块的源代码，或者从其他地方加载模块内容。</li><li><strong><code>transform</code></strong>: 这个钩子用于转换模块的内容。插件可以在这里对模块的源代码进行转换，例如将 TypeScript 转换为 JavaScript。</li><li><strong><code>moduleParsed</code></strong>: 当模块解析完成后，这个钩子会被触发。插件可以在这里获取模块的解析结果，并进行进一步处理。</li><li><strong><code>buildEnd</code></strong>: 当 Rollup 构建结束时，这个钩子会被触发。通常用于清理资源或生成构建报告。</li></ul><h2 id="输出生成阶段钩子-output-generation-hooks" tabindex="-1">输出生成阶段钩子 (Output Generation Hooks) <a class="header-anchor" href="#输出生成阶段钩子-output-generation-hooks" aria-label="Permalink to &quot;输出生成阶段钩子 (Output Generation Hooks)&quot;">​</a></h2><ul><li><strong><code>outputOptions</code></strong>: 这个钩子允许插件在生成输出之前修改或扩展输出配置选项。例如，可以在这里添加自定义的输出格式或文件名。</li><li><strong><code>renderStart</code></strong>: 当 Rollup 开始生成输出时，这个钩子会被触发。通常用于初始化一些输出相关的资源。</li><li><strong><code>banner</code> / <code>footer</code></strong>: 这些钩子允许插件在生成的 bundle 的顶部或底部添加内容。例如，可以在这里添加版权声明或版本信息。</li><li><strong><code>intro</code> / <code>outro</code></strong>: 这些钩子允许插件在生成的 bundle 的内部添加内容。例如，可以在这里添加一些全局变量或初始化代码。</li><li><strong><code>renderChunk</code></strong>: 这个钩子允许插件修改生成的 chunk 内容。例如，可以在这里对 chunk 进行压缩或添加额外的代码。</li><li><strong><code>generateBundle</code></strong>: 当 Rollup 生成 bundle 时，这个钩子会被触发。插件可以在这里修改或添加文件到最终的输出中。</li><li><strong><code>writeBundle</code></strong>: 当 bundle 写入磁盘之前，这个钩子会被触发。通常用于在文件写入之前进行最后的修改或验证。</li></ul><h2 id="其他钩子-miscellaneous-hooks" tabindex="-1">其他钩子 (Miscellaneous Hooks) <a class="header-anchor" href="#其他钩子-miscellaneous-hooks" aria-label="Permalink to &quot;其他钩子 (Miscellaneous Hooks)&quot;">​</a></h2><ul><li><strong><code>watchChange</code></strong>: 在监视模式下，当文件发生变化时，这个钩子会被触发。插件可以在这里响应文件变化，例如重新加载模块。</li><li><strong><code>closeWatcher</code></strong>: 当监视模式关闭时，这个钩子会被触发。通常用于清理与监视模式相关的资源。</li></ul><h2 id="插件间的交互" tabindex="-1">插件间的交互 <a class="header-anchor" href="#插件间的交互" aria-label="Permalink to &quot;插件间的交互&quot;">​</a></h2><p>插件之间可以通过共享上下文（如 <code>this</code>）或修改 Rollup 的配置选项进行交互。例如，一个插件可以在 <code>options</code> 钩子中修改配置，另一个插件可以在 <code>buildStart</code> 钩子中读取这些配置。</p>`,16),a=[n];function d(c,i,s,u,h,p){return e(),l("div",null,a)}const _=o(t,[["render",d]]);export{k as __pageData,_ as default};
