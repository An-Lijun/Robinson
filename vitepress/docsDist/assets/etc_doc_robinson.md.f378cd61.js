import{_ as t,o as r,c as e,Q as o}from"./chunks/framework.a333c6fb.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.md","filePath":"etc/doc/robinson.md","lastUpdated":1737297940000}'),n={name:"etc/doc/robinson.md"},d=o('<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a></p><h2 id="robinson-package" tabindex="-1">robinson package <a class="header-anchor" href="#robinson-package" aria-label="Permalink to &quot;robinson package&quot;">​</a></h2><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><table><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td><a href="./robinson.eventbus.html">eventBus</a></td><td><strong><em>(BETA)</em></strong> 函数“on”将事件侦听器添加到事件对象，将事件函数存储在指定的事件名称下。</td></tr></tbody></table><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><a href="./robinson.addclass.html">addClass(dom, classNm)</a></td><td><strong><em>(BETA)</em></strong> 该函数将一个类添加到 DOM 元素。</td></tr><tr><td><a href="./robinson.addnode.html">addNode(parentDom, dom, position)</a></td><td><strong><em>(BETA)</em></strong> 函数“addNode”将 DOM 元素或字符串插入到父 DOM 元素的指定位置。</td></tr><tr><td><a href="./robinson.asigndata.html">asignData(obj1, obj2)</a></td><td><strong><em>(BETA)</em></strong> 函数“asignData”将属性从“obj2”复制到“obj1”，并可选择执行附加函数。</td></tr><tr><td><a href="./robinson.base64toblob.html">base64ToBlob(base64)</a></td><td><strong><em>(BETA)</em></strong> 将Base64编码的字符串转换为Blob对象</td></tr><tr><td><a href="./robinson.bind.html">bind(dom, eventType, callBack, isCatch)</a></td><td><strong><em>(BETA)</em></strong> 该函数将事件侦听器绑定到 TypeScript 中的 DOM 元素。</td></tr><tr><td><a href="./robinson.blobtobase64.html">blobToBase64(blob, suffix)</a></td><td><strong><em>(BETA)</em></strong> 将Blob对象转换为Base64编码的字符串</td></tr><tr><td><a href="./robinson.cache.html">cache(storage, parmas)</a></td><td><strong><em>(BETA)</em></strong> createCache 函数创建一个缓存对象，该对象可以使用指定的存储机制和编码/解码函数来存储和检索数据。</td></tr><tr><td><a href="./robinson.calc.html">calc(number1, number2, operate)</a></td><td><strong><em>(BETA)</em></strong> 数值计算</td></tr><tr><td><a href="./robinson.compose.html">compose(fns)</a></td><td><strong><em>(BETA)</em></strong> 组合函数，将多个函数从右到左依次调用。</td></tr><tr><td><a href="./robinson.copytoclipboard.html">copyToClipboard(text)</a></td><td><strong><em>(BETA)</em></strong> 将文本复制到剪贴板。</td></tr><tr><td><a href="./robinson.currying.html">currying(fn)</a></td><td><strong><em>(BETA)</em></strong> 柯里化函数接受一个函数作为输入并返回一个新函数，该函数可以使用多个参数或以柯里化方式调用。</td></tr><tr><td><a href="./robinson.debounce.html">debounce(fn, delay, isLimmediate)</a></td><td><strong><em>(BETA)</em></strong> 防抖函数，限制函数调用的频率。</td></tr><tr><td><a href="./robinson.deepclone.html">deepClone(originalValue)</a></td><td><strong><em>(BETA)</em></strong> “deepClone”函数用于创建对象或数组的深层副本，包括处理复杂类型，例如集合、映射和符号。</td></tr><tr><td><a href="./robinson.downloadbybase64.html">downloadByBase64(buf, fileNm, suffix)</a></td><td><strong><em>(BETA)</em></strong> 通过Base64编码的字符串下载文件</td></tr><tr><td><a href="./robinson.downloadbyblob.html">downloadByBlob(blob, fileNm, suffix)</a></td><td><strong><em>(BETA)</em></strong> 通过Blob对象下载文件</td></tr><tr><td><a href="./robinson.downloadbyurl.html">downloadByUrl(url, filename, type)</a></td><td><strong><em>(BETA)</em></strong> 通过URL下载图片到本地</td></tr><tr><td><a href="./robinson.formatdate.html">formatDate(date, pattern)</a></td><td><strong><em>(BETA)</em></strong> 格式化时间。</td></tr><tr><td><a href="./robinson.getafterdate.html">getAfterDate(date, option)</a></td><td><strong><em>(BETA)</em></strong> 计算给定日期之后的日期，并返回格式化后的结果。</td></tr><tr><td><a href="./robinson.getbeforedate.html">getBeforeDate(date, option)</a></td><td><strong><em>(BETA)</em></strong> 计算给定日期之前的日期，并返回格式化后的结果。</td></tr><tr><td><a href="./robinson.getchunkarray.html">getChunkArray(array, size)</a></td><td><strong><em>(BETA)</em></strong> <code>chunkArray</code> 函数接受一个数组和一个大小参数，并返回一个新数组，其中原始数组被分割成指定大小的较小数组。</td></tr><tr><td><a href="./robinson.getdiff.html">getDiff(start, end, unitType, float)</a></td><td><strong><em>(BETA)</em></strong> 计算两个日期之间的差值。</td></tr><tr><td><a href="./robinson.getetc.html">getEtc(value, len, etcStr)</a></td><td><strong><em>(BETA)</em></strong> 函数“getEtc”接受一个字符串值并返回指定长度的子字符串，并在末尾附加一个可选的“etcStr”。</td></tr><tr><td><a href="./robinson.getfilechunk.html">getFileChunk(file, chunkSize)</a></td><td><strong><em>(BETA)</em></strong> 生成文件切片数组</td></tr><tr><td><a href="./robinson.getfilesize.html">getFileSize(file, unit)</a></td><td><strong><em>(BETA)</em></strong> 获取文件大小</td></tr><tr><td><a href="./robinson.getfiletype.html">getFileType(file)</a></td><td><strong><em>(BETA)</em></strong> 获取文件后缀名</td></tr><tr><td><a href="./robinson.getmimetype.html">getMimeType(suffix)</a></td><td><strong><em>(BETA)</em></strong> 获取文件的MIME类型</td></tr><tr><td><a href="./robinson.getnode.html">getNode(domName)</a></td><td><strong><em>(BETA)</em></strong> 函数 getNode 将 DOM 元素名称作为输入，如果找到则返回相应的元素，否则返回 null。</td></tr><tr><td><a href="./robinson.getnodes.html">getNodes(domName)</a></td><td><strong><em>(BETA)</em></strong> 函数“getNodes”返回与给定选择器匹配的 DOM 节点的 NodeList，如果未找到节点，则返回 null。</td></tr><tr><td><a href="./robinson.getrandom.html">getRandom(min, max, point)</a></td><td><strong><em>(BETA)</em></strong> 函数 getRandom 生成指定范围内具有指定小数位数的随机数。</td></tr><tr><td><a href="./robinson.getrelarray.html">getRelArray(array)</a></td><td><strong><em>(BETA)</em></strong> 函数“getRelArray”接受一个数组作为输入，并返回一个包含所有非空元素的新数组。</td></tr><tr><td><a href="./robinson.gettimestamp.html">getTimestamp(date)</a></td><td><strong><em>(BETA)</em></strong> 获取当前日期的时间戳。</td></tr><tr><td><a href="./robinson.getuniqueid.html">getUniqueId()</a></td><td><strong><em>(BETA)</em></strong> 该函数使用随机字符串模式生成唯一 ID。</td></tr><tr><td><a href="./robinson.hasclass.html">hasClass(dom, classNm)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查元素是否具有特定的类名。</td></tr><tr><td><a href="./robinson.hastypein.html">hasTypeIn(value, types)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查给定值的类型是否存在于给定类型数组中。</td></tr><tr><td><a href="./robinson.hextorgb.html">hexToRgb(hex)</a></td><td><strong><em>(BETA)</em></strong> 将十六进制颜色字符串转换为rgb颜色字符串</td></tr><tr><td><a href="./robinson.hextorgba.html">hexToRgba(hex)</a></td><td><strong><em>(BETA)</em></strong> 将十六进制颜色字符串转换为rgba颜色字符串</td></tr><tr><td><a href="./robinson.imgcompression.html">imgCompression(file, size)</a></td><td><strong><em>(BETA)</em></strong> 压缩图片文件</td></tr><tr><td><a href="./robinson.insertstr.html">insertStr(str, start, char)</a></td><td><strong><em>(BETA)</em></strong> 函数“insertStr”接受一个字符串、一个起始索引和一个字符，并返回一个新字符串，其中在指定索引处插入了该字符。</td></tr><tr><td><a href="./robinson.is.html">is(value, type)</a></td><td><strong><em>(BETA)</em></strong> 返回是某个类型的判断结果</td></tr><tr><td><a href="./robinson.isafter.html">isAfter(start, end)</a></td><td><strong><em>(BETA)</em></strong> 判断一个日期是否在另一个日期之后。</td></tr><tr><td><a href="./robinson.isarray.html">isArray(value)</a></td><td><strong><em>(BETA)</em></strong> 接受一个任意类型判断该类型是否是数组并返回。</td></tr><tr><td><a href="./robinson.isbefore.html">isBefore(start, end)</a></td><td><strong><em>(BETA)</em></strong> 判断一个日期是否在另一个日期之前。</td></tr><tr><td><a href="./robinson.isboolean.html">isBoolean(value)</a></td><td><strong><em>(BETA)</em></strong> 函数“isBoolean”检查值是否为布尔类型。</td></tr><tr><td><a href="./robinson.isdecimal.html">isDecimal(s)</a></td><td><strong><em>(BETA)</em></strong> 检查变量是否为实数</td></tr><tr><td><a href="./robinson.iselement.html">isElement(val)</a></td><td><strong><em>(BETA)</em></strong> 是否为DOM元素</td></tr><tr><td><a href="./robinson.isemail.html">isEmail(s)</a></td><td><strong><em>(BETA)</em></strong> 检查字符串是否为合法email地址</td></tr><tr><td><a href="./robinson.isempty.html">isEmpty(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数通过将 JSON 表示形式与空数组或对象进行比较来检查值是否为空。</td></tr><tr><td><a href="./robinson.iseqtype.html">isEqType(value, value2)</a></td><td><strong><em>(BETA)</em></strong> 函数“isEqType”检查两个值的类型是否相等。</td></tr><tr><td><a href="./robinson.iseqvalue.html">isEqValue(value1, value2)</a></td><td><strong><em>(BETA)</em></strong> 函数“isEqValue”比较两个值，如果它们的值和类型相等则返回 true。</td></tr><tr><td><a href="./robinson.isexternal.html">isExternal(path)</a></td><td><strong><em>(BETA)</em></strong> 判断是否为外链</td></tr><tr><td><a href="./robinson.isfinite_2.html">isFinite_2(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查一个值是否是有限数,原生的已经很好用了 这里是为了保存api统一。</td></tr><tr><td><a href="./robinson.isfunction.html">isFunction(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查给定值是否是函数。</td></tr><tr><td><a href="./robinson.ishex.html">isHex(color)</a></td><td><strong><em>(BETA)</em></strong> 判断是否为16进制颜色</td></tr><tr><td><a href="./robinson.isidcard.html">isIdCard(id)</a></td><td><strong><em>(BETA)</em></strong> 检查是否为有效的身份证号</td></tr><tr><td><a href="./robinson.isie.html">isIE(win)</a></td><td><strong><em>(BETA)</em></strong> 判断是否是IE浏览器</td></tr><tr><td><a href="./robinson.isint.html">isInt(value)</a></td><td><strong><em>(BETA)</em></strong> 函数“isInteger”检查给定值是否为整数,原生的判断已经很好用了 es6+。</td></tr><tr><td><a href="./robinson.isleapyear.html">isLeapYear(year)</a></td><td><strong><em>(BETA)</em></strong> 判断给定年份是否为闰年。</td></tr><tr><td><a href="./robinson.ismobilenum.html">isMobileNum(s)</a></td><td><strong><em>(BETA)</em></strong> 是否为合法手机号</td></tr><tr><td><a href="./robinson.isnan_2.html">isNaN_2(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查值是否为 NaN。</td></tr><tr><td><a href="./robinson.isnode.html">isNode(el)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查元素是否是节点。</td></tr><tr><td><a href="./robinson.isnull.html">isNull(value)</a></td><td><strong><em>(BETA)</em></strong> 函数“isNull”检查给定值是否为空。</td></tr><tr><td><a href="./robinson.isnumber.html">isNumber(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查值是否为数字。</td></tr><tr><td><a href="./robinson.isobjectlike.html">isObjectLike(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查值是否是类对象like 类型。</td></tr><tr><td><a href="./robinson.isorigindate.html">isOriginDate(val)</a></td><td><strong><em>(BETA)</em></strong> 是否为日期格式</td></tr><tr><td><a href="./robinson.ispromise.html">isPromise(val)</a></td><td><strong><em>(BETA)</em></strong> 是否为Promise格式</td></tr><tr><td><a href="./robinson.isrange.html">isRange(value, min, max)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查给定值是否在指定范围内。</td></tr><tr><td><a href="./robinson.isreftype.html">isRefType(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查值是否为引用类型。</td></tr><tr><td><a href="./robinson.isregexp.html">isRegExp(val)</a></td><td><strong><em>(BETA)</em></strong> 是否为正则格式</td></tr><tr><td><a href="./robinson.isrgb.html">isRgb(color)</a></td><td><strong><em>(BETA)</em></strong> 判断是否为rgb颜色</td></tr><tr><td><a href="./robinson.isrgba.html">isRgba(color)</a></td><td><strong><em>(BETA)</em></strong> 判断是否为rgba颜色</td></tr><tr><td><a href="./robinson.issimpletype.html">isSimpleType(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查值是否为简单值（数字、字符串、布尔值、符号、null、undefined 或 bigint）或复杂值（函数、对象、数组、集合、映射）。</td></tr><tr><td><a href="./robinson.isstring.html">isString(value)</a></td><td><strong><em>(BETA)</em></strong> 函数isString 检查给定值是否是字符串。</td></tr><tr><td><a href="./robinson.issymbol.html">isSymbol(value)</a></td><td><strong><em>(BETA)</em></strong> 该函数检查值是否是Symbol 类型的对象。</td></tr><tr><td><a href="./robinson.isundefined.html">isUndefined(value)</a></td><td><strong><em>(BETA)</em></strong> 函数“isUndefined”检查值是否未定义。</td></tr><tr><td><a href="./robinson.isurl.html">isUrl(url)</a></td><td><strong><em>(BETA)</em></strong> 检查是否为有效的URL</td></tr><tr><td><a href="./robinson.mapping.html">mapping(enumData, options, expty)</a></td><td><strong><em>(BETA)</em></strong> 映射函数可以将数据进行枚举映射。</td></tr><tr><td><a href="./robinson.nodetostring.html">nodeToString(node)</a></td><td><strong><em>(BETA)</em></strong> 函数 <code>nodeToString</code> 接受一个 HTML 元素并返回它的字符串表示形式。</td></tr><tr><td><a href="./robinson.parsecolorstring.html">parseColorString(color)</a></td><td><p><strong><em>(BETA)</em></strong> 解析颜色字符串为颜色对象</p><p>该函数可以解析十六进制颜色字符串或rgba颜色字符串为颜色对象</p></td></tr><tr><td><a href="./robinson.parsehexcolor.html">parseHexColor(color)</a></td><td><p><strong><em>(BETA)</em></strong> 解析十六进制颜色字符串为RGBA对象</p><p>该函数接受一个十六进制颜色字符串（例如 &quot;#RRGGBB&quot; 或 &quot;#RGB&quot;）， 并将其解析为一个包含红（r）、绿（g）、蓝（b）和透明度（a）分量的对象</p></td></tr><tr><td><a href="./robinson.parsergbacolor.html">parseRgbaColor(color)</a></td><td><strong><em>(BETA)</em></strong> 解析rgba颜色字符串为颜色对象</td></tr><tr><td><a href="./robinson.pipe.html">pipe(fns)</a></td><td><strong><em>(BETA)</em></strong> 从左向右执行函数。</td></tr><tr><td><a href="./robinson.preventdefault.html">preventDefault(event)</a></td><td>该函数可防止事件的默认行为。</td></tr><tr><td><a href="./robinson.printbyblob.html">printByBlob(blob, type)</a></td><td><strong><em>(BETA)</em></strong> 通过Blob对象打印内容</td></tr><tr><td><a href="./robinson.printbydom.html">printByDom(el, custStyle)</a></td><td><strong><em>(BETA)</em></strong> 通过DOM元素打印内容</td></tr><tr><td><a href="./robinson.removeclass.html">removeClass(dom, classNm)</a></td><td><strong><em>(BETA)</em></strong> 该函数从给定的 DOM 元素中删除指定的类名。</td></tr><tr><td><a href="./robinson.removenode.html">removeNode(parentNode, dom)</a></td><td><strong><em>(BETA)</em></strong> 该函数从其父节点中删除指定的 DOM 元素。</td></tr><tr><td><a href="./robinson.rendertmp.html">renderTmp(selecter, data)</a></td><td><strong><em>(BETA)</em></strong> 该函数获取元素的InnerHtml字符串模板,填写好内容并返回</td></tr><tr><td><a href="./robinson.replaceclass.html">replaceClass(dom, newClass, oldClass)</a></td><td>该函数将给定 DOM 元素上的旧类替换为新类。</td></tr><tr><td><a href="./robinson.replacenode.html">replaceNode(parentNode, newDom, oldDom)</a></td><td><strong><em>(BETA)</em></strong> 函数“replaceNode”用新的 DOM 元素或给定父元素中的字符串替换旧的 DOM 元素。</td></tr><tr><td><a href="./robinson.rgbatohex.html">rgbaToHex(color)</a></td><td><strong><em>(BETA)</em></strong> 将rgba颜色字符串转换为十六进制颜色字符串</td></tr><tr><td><a href="./robinson.rgbtohex.html">rgbToHex(color)</a></td><td><strong><em>(BETA)</em></strong> 将rgb颜色字符串转换为十六进制颜色字符串</td></tr><tr><td><a href="./robinson.stoppropagation.html">stopPropagation(event)</a></td><td><strong><em>(BETA)</em></strong> 函数 stopPropagation 阻止事件在事件链中向上冒泡。</td></tr><tr><td><a href="./robinson.stringtonode.html">stringToNode(str)</a></td><td><strong><em>(BETA)</em></strong> 该函数接受一个字符串并返回新创建的 div 元素的第一个子节点，并将该字符串作为其innerHTML。</td></tr><tr><td><a href="./robinson.throttle.html">throttle(fn, immediate, leading, trailing)</a></td><td><strong><em>(BETA)</em></strong> 节流函数，限制函数调用的频率。</td></tr><tr><td><a href="./robinson.torgbastring.html">toRgbaString(colorObj, n)</a></td><td><strong><em>(BETA)</em></strong> 将颜色对象转换为rgba颜色字符串</td></tr><tr><td><a href="./robinson.transhightlight.html">transHightLight(str, keyWords, color)</a></td><td><strong><em>(BETA)</em></strong> 将字符串中的关键词高亮显示。</td></tr><tr><td><a href="./robinson.unbind.html">unBind(dom, eventType, fnName)</a></td><td><strong><em>(BETA)</em></strong> 函数 unBind 从 DOM 元素中删除事件侦听器。</td></tr><tr><td><a href="./robinson.urltobase64.html">urlToBase64(url, suffix)</a></td><td><strong><em>(BETA)</em></strong> 将图片URL转换为Base64编码的字符串</td></tr></tbody></table>',6),s=[d];function a(m,i,l,g,h,b){return r(),e("div",null,s)}const T=t(n,[["render",a]]);export{B as __pageData,T as default};
