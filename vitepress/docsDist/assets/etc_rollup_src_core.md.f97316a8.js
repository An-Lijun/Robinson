import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a333c6fb.js";const h=JSON.parse('{"title":"核心概念","description":"","frontmatter":{},"headers":[],"relativePath":"etc/rollup/src/core.md","filePath":"etc/rollup/src/core.md","lastUpdated":1738049586000}'),p={name:"etc/rollup/src/core.md"},o=l(`<h1 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h1><p>前面我们快速体验了一下rollup的打包流程,这里我们详细讲解一下rollup的核心概念</p><h3 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h3><ul><li>input：这是 Rollup 的入口文件路径，通常是一个 JavaScript 文件。Rollup 会从这个文件开始分析依赖关系并打包。</li></ul><h4 id="单入口input配置" tabindex="-1">单入口input配置 <a class="header-anchor" href="#单入口input配置" aria-label="Permalink to &quot;单入口input配置&quot;">​</a></h4><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 单个入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 单个入口文件</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h4 id="多入口input-配置" tabindex="-1">多入口input 配置 <a class="header-anchor" href="#多入口input-配置" aria-label="Permalink to &quot;多入口input 配置&quot;">​</a></h4><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    main: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    vendor: </span><span style="color:#9ECBFF;">&#39;src/vendor.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dir: </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">main:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">vendor:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/vendor.js&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">dir:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p><strong>注意:</strong></p><ul><li><p>路径问题：input 选项中的路径是相对于配置文件所在目录的。如果入口文件位于其他目录，需要正确指定相对路径或绝对路径。</p></li><li><p>动态导入：如果入口文件中使用了动态导入（如 import()），Rollup 会自动处理这些动态导入，并将它们作为单独的块进行打包。注意必须通过 output.dir 选项指定输出目录，而不是使用 out否则也会打成一个js文件</p></li><li><p>多入口打包：当配置多个入口文件时，Rollup 会为每个入口文件生成一个独立的输出文件。注意必须通过 output.dir 选项指定输出目录，而不是使用 out</p></li></ul><h3 id="output" tabindex="-1">output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;output&quot;">​</a></h3><p>output：这个选项用于配置输出文件的路径、格式等。file 指定输出文件的路径，format 指定输出模块的格式，如 es（ES 模块）、cjs（CommonJS 模块）、iife（立即执行函数表达式）等。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;iife&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;MyBundle&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourcemap: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    globals: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      jquery: </span><span style="color:#9ECBFF;">&#39;$&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;iife&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;MyBundle&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">sourcemap:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">globals:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">jquery:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;$&#39;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h4 id="file" tabindex="-1"><code>file</code> <a class="header-anchor" href="#file" aria-label="Permalink to &quot;\`file\`&quot;">​</a></h4><p>选项用于指定输出文件的路径和名称。<br> 例如，file: &#39;dist/bundle.js&#39; 会将打包后的文件输出到 <code>dist</code> 目录下，并命名为 bundle.js。</p><h4 id="format" tabindex="-1"><code>format</code> <a class="header-anchor" href="#format" aria-label="Permalink to &quot;\`format\`&quot;">​</a></h4><p>选项决定了输出模块的格式。常见的格式包括：</p><p>iife: 立即执行函数表达式，适用于浏览器环境。<br> cjs: CommonJS 格式，适用于 Node.js 环境。<br> es: ES 模块格式，适用于现代 JavaScript 环境。<br> umd: 通用模块定义，兼容 AMD、CommonJS 和全局变量。</p><p>当 format 为 iife 或 umd 时，<code>name</code> 选项用于指定全局变量的名称。例如，name: &#39;MyBundle&#39; 会将打包后的代码挂载到 <code>window.MyBundle</code> 上。</p><h4 id="sourcemap" tabindex="-1"><code>sourcemap</code> <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;\`sourcemap\`&quot;">​</a></h4><p>选项用于控制是否生成 sourcemap 文件。sourcemap 文件可以帮助开发者在调试时映射回原始源代码。设置为 <code>true</code> 时，Rollup 会生成一个 <code>.map</code> 文件。</p><p>除了 <code>output.sourcemap</code>，Rollup 还提供了其他一些与 Source Map 相关的选项，例如：</p><ul><li><code>output.sourcemapFile</code>：指定生成的 Source Map 文件的名称。</li><li><code>output.sourcemapExcludeSources</code>：是否在 Source Map 中包含源代码内容。</li></ul><h4 id="globals" tabindex="-1"><code>globals</code> <a class="header-anchor" href="#globals" aria-label="Permalink to &quot;\`globals\`&quot;">​</a></h4><p>选项用于指定外部依赖的全局变量名称。例如，如果你在代码中使用了 jquery，并且希望它通过全局变量 <code>$</code> 来引用 。</p><p>举个例子 假设你正在开发一个浏览器端的 JavaScript 应用，并且你使用了 <code>lodash</code> 和 <code>jquery</code> 这两个库。你通过 <code>&lt;script&gt;</code> 标签在 HTML 文件中引入了这两个库，因此它们在全局环境中已经存在。在这种情况下，你可以使用 <code>globals</code> 选项来告诉 Rollup 如何引用这些全局变量。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;iife&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;MyBundle&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    globals: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      lodash: </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      jquery: </span><span style="color:#9ECBFF;">&#39;$&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  external: [</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;jquery&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">resolve</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">commonjs</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;iife&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;MyBundle&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">globals:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">lodash:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;_&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">jquery:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;$&#39;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">external:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;lodash&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;jquery&#39;</span><span style="color:#000000;">],</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">resolve</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">commonjs</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h4 id="dir" tabindex="-1"><code>dir</code> <a class="header-anchor" href="#dir" aria-label="Permalink to &quot;\`dir\`&quot;">​</a></h4><p>当输出多个文件时，指定输出目录。这个在分包时候是必须要使用的。 注意,dir和file不能同时出现,会报错的。 在输出文件的开头或结尾添加自定义内容。</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        dir: </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;MyBundle&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">dir:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;umd&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;MyBundle&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h4 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;\`exports\`&quot;">​</a></h4><p>指定模块的导出方式，如 auto、default、named 等。</p><h4 id="banner-footer" tabindex="-1"><code>banner/footer</code> <a class="header-anchor" href="#banner-footer" aria-label="Permalink to &quot;\`banner/footer\`&quot;">​</a></h4><p>在输出文件的开头或结尾添加自定义内容。 这里需要注意@rollup/plugin-terser会把注释删掉,学习这个功能的时候注意要关闭terser</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;MyBundle&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        banner: </span><span style="color:#9ECBFF;">&quot;/* AnLijun, Copyright (c) 2025. */&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;umd&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;MyBundle&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">banner:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&quot;/* AnLijun, Copyright (c) 2025. */&quot;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/0939d99b06e646cfb96d4695bc5e812e~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737859432&amp;x-orig-sign=%2Fcq%2BE3xjLzmCy2MV0rk0pLPfiXM%3D" alt="image.png"></p><h4 id="plugins" tabindex="-1"><code>plugins</code> <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;\`plugins\`&quot;">​</a></h4><p>Rollup 的插件系统非常强大，可以通过插件扩展 Rollup 的功能。常见的插件包括 resolve（解析模块路径）、commonjs（转换 CommonJS 模块）、babel（使用 Babel 进行代码转换）等。</p><p>这个后面重点说</p><h4 id="external" tabindex="-1"><code>external</code> <a class="header-anchor" href="#external" aria-label="Permalink to &quot;\`external\`&quot;">​</a></h4><p>这个选项用于指定哪些模块是外部依赖，不打包进输出文件。通常用于排除第三方库或 Node.js 内置模块。</p><p><code>external</code> 选项用于告诉 Rollup 哪些模块不应该被打包到最终的输出文件中。这些模块通常是一些第三方库或 Node.js 内置模块，它们在运行时环境中已经存在，因此不需要被打包。</p><p>可以直接字符串数组配置</p><pre><code>external: [&#39;lodash&#39;, &#39;react&#39;]
</code></pre><p>在使用字符串数组时，模块名称必须与 <code>import</code> 或 <code>require</code> 语句中的名称完全匹配。 也可以使用函数配置</p><pre><code>external: id =&gt; /lodash|react/.test(id)
</code></pre><p>使用函数可以更灵活地控制哪些模块被视为外部依赖，特别是当你需要根据模块路径或名称进行动态判断时。</p><h3 id="watch" tabindex="-1"><code>watch</code> <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;\`watch\`&quot;">​</a></h3><p>这个选项用于配置 Rollup 的监听模式，当文件发生变化时自动重新打包。 注意:如果想要启动监听的话 命令为 rollup -c --watch rollup 配置文件修改的时候不用重启</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;MyBundle&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    watch: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        clearScreen: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;umd&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">name:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;MyBundle&#39;</span></span>
<span class="line"><span style="color:#000000;">    },</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">watch:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">clearScreen:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">false</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>在 Rollup 配置文件中，可以通过 <code>watch</code> 选项来启用和配置 watch 模式。以下是一些常用的配置选项：</p><ul><li><code>include</code>：指定要监听的文件或目录，支持 glob 模式。</li><li><code>exclude</code>：指定要排除的文件或目录，支持 glob 模式。</li><li><code>chokidar</code>：如果设置为 <code>true</code>，Rollup 会使用 <code>chokidar</code> 库来监听文件变化，而不是 Node.js 自带的 <code>fs.watch</code>。</li></ul><hr><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>Watch 模式非常适合在开发过程中使用，尤其是在以下场景中：</p><ul><li><strong>快速迭代</strong>：当你在开发过程中频繁修改代码时，watch 模式可以自动重新构建项目，无需手动运行构建命令。</li><li><strong>调试</strong>：在调试过程中，watch 模式可以确保每次代码修改后都能立即看到效果，从而加快调试速度。</li><li><strong>热更新</strong>：结合一些开发服务器（如 <code>rollup-plugin-serve</code>），watch 模式可以实现热更新功能，即在代码修改后自动刷新浏览器页面。</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><strong>性能开销</strong>：watch 模式会持续监听文件变化，因此会占用一定的系统资源。在大型项目中，可能会对性能产生一定影响。</li><li><strong>文件锁定</strong>：在某些操作系统上，文件监听可能会导致文件被锁定，从而影响其他进程对文件的访问。</li><li><strong>兼容性</strong>：不同操作系统对文件监听的实现方式不同，可能会导致一些兼容性问题。使用 <code>chokidar</code> 库可以提高跨平台的兼容性。</li></ul><p>通过合理配置和使用 watch 模式，可以显著提高开发效率，减少手动操作，使开发过程更加流畅。</p><h3 id="插件选项" tabindex="-1">插件选项 <a class="header-anchor" href="#插件选项" aria-label="Permalink to &quot;插件选项&quot;">​</a></h3><ul><li><strong><code>resolve</code></strong>：这个插件用于解析模块路径，确保 Rollup 能够正确找到依赖模块。</li><li><strong><code>commonjs</code></strong>：这个插件用于将 CommonJS 模块转换为 ES6 模块，以便 Rollup 能够正确处理。</li><li><strong><code>babel</code></strong>：这个插件用于使用 Babel 进行代码转换，通常用于将 ES6+ 代码转换为 ES5 代码。</li><li><strong><code>terser</code></strong>：这个插件用于代码压缩，通常用于生产环境。</li></ul><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(),  </span><span style="color:#6A737D;">// 解析 node_modules 中的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">(), </span><span style="color:#6A737D;">// 将 CommonJS 模块转换为 ES6 模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({     </span><span style="color:#6A737D;">// 使用 Babel 转换代码</span></span>
<span class="line"><span style="color:#E1E4E8;">      exclude: </span><span style="color:#9ECBFF;">&#39;node_modules/**&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 排除 node_modules 目录</span></span>
<span class="line"><span style="color:#E1E4E8;">      presets: [</span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">resolve</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">commonjs</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">resolve</span><span style="color:#000000;">(),  </span><span style="color:#008000;">// 解析 node_modules 中的模块</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">commonjs</span><span style="color:#000000;">(), </span><span style="color:#008000;">// 将 CommonJS 模块转换为 ES6 模块</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({     </span><span style="color:#008000;">// 使用 Babel 转换代码</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">exclude:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;node_modules/**&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 排除 node_modules 目录</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">presets:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;@babel/preset-env&#39;</span><span style="color:#000000;">]</span></span>
<span class="line"><span style="color:#000000;">    })</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h4 id="插件的配置" tabindex="-1">插件的配置 <a class="header-anchor" href="#插件的配置" aria-label="Permalink to &quot;插件的配置&quot;">​</a></h4><p>每个插件都可以接受一个配置对象作为参数。例如，<code>@rollup/plugin-babel</code> 插件可以配置 <code>exclude</code> 选项来排除某些文件或目录，以及 <code>presets</code> 选项来指定 Babel 的预设。</p><h4 id="插件的顺序" tabindex="-1">插件的顺序 <a class="header-anchor" href="#插件的顺序" aria-label="Permalink to &quot;插件的顺序&quot;">​</a></h4><p>插件的顺序非常重要，因为它们会按照数组中的顺序依次执行。例如，通常需要先使用 <code>@rollup/plugin-node-resolve</code> 解析模块，然后再使用 <code>@rollup/plugin-commonjs</code> 转换模块格式。</p><h3 id="高级选项" tabindex="-1">高级选项 <a class="header-anchor" href="#高级选项" aria-label="Permalink to &quot;高级选项&quot;">​</a></h3><ul><li><strong><code>treeshake</code></strong>：这个选项用于配置 Tree-shaking 的行为。Tree-shaking 是 Rollup 的一个重要特性，用于删除未使用的代码。</li><li><strong><code>context</code></strong>：这个选项用于指定模块的上下文，通常用于避免全局变量污染。</li><li><strong><code>moduleContext</code></strong>：这个选项用于为特定模块指定上下文，通常用于处理模块中的 <code>this</code> 指向问题。</li><li><strong><code>onwarn</code></strong>：这个选项用于自定义警告处理函数，可以用于过滤或处理 Rollup 发出的警告。</li></ul>`,68),e=[o];function c(t,r,y,i,E,d){return a(),n("div",null,e)}const m=s(p,[["render",c]]);export{h as __pageData,m as default};
