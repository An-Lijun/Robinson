import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.a333c6fb.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.debounce.md","filePath":"etc/doc/robinson.debounce.md","lastUpdated":1737297940000}'),e={name:"etc/doc/robinson.debounce.md"},l=o(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.debounce.html">debounce</a></p><h2 id="debounce-function" tabindex="-1">debounce() function <a class="header-anchor" href="#debounce-function" aria-label="Permalink to &quot;debounce() function&quot;">​</a></h2><blockquote><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></blockquote><p>防抖函数，限制函数调用的频率。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">delay</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isLimmediate</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">debounce</span><span style="color:#000000;">(</span><span style="color:#795E26;">fn</span><span style="color:#000000;">: </span><span style="color:#267F99;">Function</span><span style="color:#000000;">, </span><span style="color:#001080;">delay</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">, </span><span style="color:#001080;">isLimmediate</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">): </span><span style="color:#267F99;">Function</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>fn</td><td>Function</td><td>“fn”参数是您想要限制的函数。</td></tr><tr><td>delay</td><td>number</td><td>“delay”参数是函数调用之间的最小时间间隔（以毫秒为单位）。</td></tr><tr><td>isLimmediate</td><td>boolean</td><td><em>(Optional)</em> “isLimmediate”参数决定该函数是在调用时立即执行还是等待指定的“delay”时间过去后才第一次执行该函数。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>Function</p><p>{Function} - 返回一个防抖函数。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Logged&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">debouncedLog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(log, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">debouncedLog</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 立即执行</span></span>
<span class="line"><span style="color:#B392F0;">debouncedLog</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 1秒内再次调用不会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">debouncedLog.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 取消执行</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#795E26;">log</span><span style="color:#000000;"> = () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#001080;">console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Logged&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">debouncedLog</span><span style="color:#000000;"> = </span><span style="color:#795E26;">debounce</span><span style="color:#000000;">(</span><span style="color:#001080;">log</span><span style="color:#000000;">, </span><span style="color:#098658;">1000</span><span style="color:#000000;">, </span><span style="color:#0000FF;">true</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">debouncedLog</span><span style="color:#000000;">(); </span><span style="color:#008000;">// 立即执行</span></span>
<span class="line"><span style="color:#795E26;">debouncedLog</span><span style="color:#000000;">(); </span><span style="color:#008000;">// 1秒内再次调用不会执行</span></span>
<span class="line"><span style="color:#001080;">debouncedLog</span><span style="color:#000000;">.</span><span style="color:#795E26;">cancel</span><span style="color:#000000;">(); </span><span style="color:#008000;">// 取消执行</span></span></code></pre></div>`,13),p=[l];function t(c,r,y,d,i,E){return n(),a("div",null,p)}const b=s(e,[["render",t]]);export{F as __pageData,b as default};
