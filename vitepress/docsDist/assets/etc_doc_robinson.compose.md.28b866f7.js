import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.a333c6fb.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.compose.md","filePath":"etc/doc/robinson.compose.md","lastUpdated":1737297940000}'),p={name:"etc/doc/robinson.compose.md"},l=n(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.compose.html">compose</a></p><h2 id="compose-function" tabindex="-1">compose() function <a class="header-anchor" href="#compose-function" aria-label="Permalink to &quot;compose() function&quot;">​</a></h2><blockquote><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></blockquote><p>组合函数，将多个函数从右到左依次调用。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compose</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">fns</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt;)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">compose</span><span style="color:#000000;">(...</span><span style="color:#001080;">fns</span><span style="color:#000000;">: </span><span style="color:#267F99;">Array</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Function</span><span style="color:#000000;">&gt;): </span><span style="color:#267F99;">Function</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>fns</td><td>Array&lt;Function&gt;</td><td>要组合的函数。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>Function</p><p>{Function} - 返回一个组合后的函数。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addOne</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">composed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compose</span><span style="color:#E1E4E8;">(double, addOne);</span></span>
<span class="line"><span style="color:#B392F0;">composed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 返回 6</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#795E26;">addOne</span><span style="color:#000000;"> = </span><span style="color:#001080;">x</span><span style="color:#000000;"> </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#001080;">x</span><span style="color:#000000;"> + </span><span style="color:#098658;">1</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#795E26;">double</span><span style="color:#000000;"> = </span><span style="color:#001080;">x</span><span style="color:#000000;"> </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#001080;">x</span><span style="color:#000000;"> * </span><span style="color:#098658;">2</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0070C1;">composed</span><span style="color:#000000;"> = </span><span style="color:#795E26;">compose</span><span style="color:#000000;">(</span><span style="color:#001080;">double</span><span style="color:#000000;">, </span><span style="color:#001080;">addOne</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">composed</span><span style="color:#000000;">(</span><span style="color:#098658;">2</span><span style="color:#000000;">);</span><span style="color:#008000;">// 返回 6</span></span></code></pre></div>`,13),e=[l];function t(c,r,y,i,E,d){return a(),o("div",null,e)}const m=s(p,[["render",t]]);export{h as __pageData,m as default};
