import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.a333c6fb.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.deepclone.md","filePath":"etc/doc/robinson.deepclone.md"}'),o={name:"etc/doc/robinson.deepclone.md"},l=e(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.deepclone.html">deepClone</a></p><h2 id="deepclone-function" tabindex="-1">deepClone() function <a class="header-anchor" href="#deepclone-function" aria-label="Permalink to &quot;deepClone() function&quot;">​</a></h2><blockquote><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></blockquote><p>“deepClone”函数用于创建对象或数组的深层副本，包括处理复杂类型，例如集合、映射和符号。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">originalValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">deepClone</span><span style="color:#000000;">(</span><span style="color:#001080;">originalValue</span><span style="color:#000000;">: </span><span style="color:#267F99;">any</span><span style="color:#000000;">): </span><span style="color:#267F99;">any</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>originalValue</td><td>any</td><td>OriginalValue 参数是您要深度克隆的值。它可以是任何数据类型，包括对象、数组、集合、映射、函数以及字符串或数字等简单值。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>any</p><p>{any} - 函数“deepClone”返回“originalValue”参数的深度克隆。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     a: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   };</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cloneData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepClone</span><span style="color:#E1E4E8;">(data);</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">data</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#000000;">     </span><span style="color:#001080;">a:</span><span style="color:#000000;"> [</span><span style="color:#098658;">1</span><span style="color:#000000;">, </span><span style="color:#098658;">2</span><span style="color:#000000;">]</span></span>
<span class="line"><span style="color:#000000;">   };</span></span>
<span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">cloneData</span><span style="color:#000000;"> = </span><span style="color:#795E26;">deepClone</span><span style="color:#000000;">(</span><span style="color:#001080;">data</span><span style="color:#000000;">);</span></span></code></pre></div>`,13),p=[l];function t(r,c,i,d,y,E){return a(),n("div",null,p)}const F=s(o,[["render",t]]);export{u as __pageData,F as default};
