import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.a333c6fb.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.bind.md","filePath":"etc/doc/robinson.bind.md"}'),e={name:"etc/doc/robinson.bind.md"},l=o(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.bind.html">bind</a></p><h2 id="bind-function" tabindex="-1">bind() function <a class="header-anchor" href="#bind-function" aria-label="Permalink to &quot;bind() function&quot;">​</a></h2><blockquote><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></blockquote><p>该函数将事件侦听器绑定到 TypeScript 中的 DOM 元素。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dom</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">eventType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callBack</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventListenerOrEventListenerObject</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">isCatch</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">bind</span><span style="color:#000000;">(</span><span style="color:#001080;">dom</span><span style="color:#000000;">: </span><span style="color:#267F99;">Node</span><span style="color:#000000;">, </span><span style="color:#001080;">eventType</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">callBack</span><span style="color:#000000;">: </span><span style="color:#267F99;">EventListenerOrEventListenerObject</span><span style="color:#000000;">, </span><span style="color:#001080;">isCatch</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>dom</td><td>Node</td><td><code>dom</code> 参数是将事件监听器附加到的 DOM 元素。它可以是任何有效的 DOM 元素</td></tr><tr><td>eventType</td><td>string</td><td>eventType 参数是一个字符串，指定要侦听的事件类型。事件类型的示例包括“单击”、“按下键”、“鼠标悬停”等。</td></tr><tr><td>callBack</td><td>EventListenerOrEventListenerObject</td><td><code>callBack</code> 参数是当 DOM 元素上发生指定事件时将执行的函数。它可以是实现EventListener 或 EventListenerObject 接口的函数或对象。</td></tr><tr><td>isCatch</td><td>boolean</td><td><em>(Optional)</em> isCatch 参数是一个布尔值，用于确定事件监听器在处理事件时是否应使用捕获阶段（true）或冒泡阶段（false）。默认情况下，它设置为“false”，这意味着事件侦听器将使用冒泡阶段。</td></tr></tbody></table><p><strong>Returns:</strong></p><p>void</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> btn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">querySelect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(btn,</span><span style="color:#9ECBFF;">&#39;clic&#39;</span><span style="color:#E1E4E8;">,()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">     console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;123&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   })</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">btn</span><span style="color:#000000;"> =</span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">querySelect</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;button&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">   </span><span style="color:#795E26;">bind</span><span style="color:#000000;">(</span><span style="color:#001080;">btn</span><span style="color:#000000;">,</span><span style="color:#A31515;">&#39;clic&#39;</span><span style="color:#000000;">,()</span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#000000;">     </span><span style="color:#001080;">console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;123&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">   })</span></span></code></pre></div>`,12),t=[l];function p(c,r,i,y,d,E){return a(),n("div",null,t)}const F=s(e,[["render",p]]);export{h as __pageData,F as default};
