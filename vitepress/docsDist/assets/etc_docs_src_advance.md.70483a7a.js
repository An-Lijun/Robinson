import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a333c6fb.js";const g=JSON.parse('{"title":"进阶","description":"","frontmatter":{},"headers":[],"relativePath":"etc/docs/src/advance.md","filePath":"etc/docs/src/advance.md","lastUpdated":1737297940000}'),p={name:"etc/docs/src/advance.md"},o=l(`<h1 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h1><p>一些打包插件列表 <a href="https://github.com/rollup/awesome" target="_blank" rel="noreferrer">GitHub - rollup/awesome: ⚡️ Delightful Rollup Plugins, Packages, and Resources</a></p><h2 id="导入json-rollup-plugin-json" tabindex="-1">导入Json (@rollup/plugin-json) <a class="header-anchor" href="#导入json-rollup-plugin-json" aria-label="Permalink to &quot;导入Json (@rollup/plugin-json)&quot;">​</a></h2><p>默认情况下rollup.js不支持导入json模块,但是实际上可能我们又需要怎么办。</p><p>这里我们可以用插件进行处理。</p><ol><li>首先搭建一个基础rollup工程</li><li>安装插件 <strong>npm i @rollup/plugin-json -D</strong></li><li>配置插件</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input:</span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//函数入口文件地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    output:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        file:</span><span style="color:#9ECBFF;">&#39;./dist/bundle.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//打包地址</span></span>
<span class="line"><span style="color:#E1E4E8;">        format:</span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//格式化方式(模块化)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()] </span><span style="color:#6A737D;">// 可以导入使用json数据</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#A31515;">&#39;src/index.js&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">//函数入口文件地址</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">output:</span><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">file:</span><span style="color:#A31515;">&#39;./dist/bundle.js&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">//打包地址</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">format:</span><span style="color:#A31515;">&#39;cjs&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">//格式化方式(模块化)</span></span>
<span class="line"><span style="color:#000000;">    },</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span><span style="color:#795E26;">json</span><span style="color:#000000;">()] </span><span style="color:#008000;">// 可以导入使用json数据</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/f81f9d2722d34069ac9096afecf2a858~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=pY9qsPPyjsozZS7pw72AVYtd%2Be4%3D" alt="image.png"> 4. 打包并检查打包产物</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/47e0b4cc09414069afd2a9472bb07e53~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=lNi71CKMdJ3MF5ygKzKvMexBtzs%3D" alt="image.png"> 这里可以看到构建出来的产物中并没有把整个package.json打包进来而是直接打包了version 这一个变量,这就是Rollup 默认支持 的<a href="https://juejin.cn/post/7030727223602905119" target="_blank" rel="noreferrer">Tree-Shaking</a>。 注意 如果使用的如果是CommonJs规范。由于 CommonJS 模块是动态加载的，Rollup 无法在编译时确定哪些代码会被使用，因此无法对 CommonJS 模块进行 Tree Shaking 优化。</p><h2 id="代码压缩-rollup-plugin-terser" tabindex="-1">代码压缩 (@rollup/plugin-terser) <a class="header-anchor" href="#代码压缩-rollup-plugin-terser" aria-label="Permalink to &quot;代码压缩 (@rollup/plugin-terser)&quot;">​</a></h2><p>前面我们把代码已经打包出来了但是这样的代码上面的产物还不够好,一方面额外的空格换行可能引起网络传输量变大,另一方面明文的代码也不够安全。 这里我们可以用插件进行压缩处理。</p><ol><li>首先搭建一个基础rollup工程</li><li>安装插件 <strong>npm i @rollup/plugin-terser -D</strong></li><li>配置插件</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input:</span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//函数入口文件地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    output:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        file:</span><span style="color:#9ECBFF;">&#39;./dist/bundle.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//打包地址</span></span>
<span class="line"><span style="color:#E1E4E8;">        format:</span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//格式化方式(模块化)</span></span>
<span class="line"><span style="color:#E1E4E8;">        plugins: [</span><span style="color:#B392F0;">terser</span><span style="color:#E1E4E8;">()] </span><span style="color:#6A737D;">//对产物进行压缩</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()] </span><span style="color:#6A737D;">// 可以导入使用json数据</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#A31515;">&#39;src/index.js&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">//函数入口文件地址</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">output:</span><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">file:</span><span style="color:#A31515;">&#39;./dist/bundle.js&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">//打包地址</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">format:</span><span style="color:#A31515;">&#39;cjs&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">//格式化方式(模块化)</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span><span style="color:#795E26;">terser</span><span style="color:#000000;">()] </span><span style="color:#008000;">//对产物进行压缩</span></span>
<span class="line"><span style="color:#000000;">    },</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span><span style="color:#795E26;">json</span><span style="color:#000000;">()] </span><span style="color:#008000;">// 可以导入使用json数据</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/efec65cb19fc4a5686774fb235cb1843~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=2K24khEKA035pYGNL9Ak8oKH7rQ%3D" alt="image.png"> 4. 打包并检查打包产物</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/e4e534ab53a54540a6c82b3d5bc41f51~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=JA%2BI5qAAGs%2BrBk6jY9T05VjLYWU%3D" alt="image.png"> 可以看到这里我们的产物基本上与我们经常看到的npm 库类似了。</p><p>terser 的配置项 <a href="https://gitcode.com/gh_mirrors/te/terser?utm_source=csdn_github_accelerator" target="_blank" rel="noreferrer">GitCode - 全球开发者的开源社区,开源代码托管平台</a></p><h2 id="分析打包结果-rollup-plugin-visualizer" tabindex="-1">分析打包结果 rollup-plugin-visualizer <a class="header-anchor" href="#分析打包结果-rollup-plugin-visualizer" aria-label="Permalink to &quot;分析打包结果 rollup-plugin-visualizer&quot;">​</a></h2><p><code>rollup-plugin-visualizer</code> 是一个用于分析 Rollup 打包结果的插件。它能够生成一个可视化的报告，帮助开发者了解打包后文件的体积分布、模块依赖关系等信息。这对于优化打包体积和性能非常有帮助。 npm i rollup-plugin-visualizer</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { visualizer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-visualizer&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">visualizer</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      filename: </span><span style="color:#9ECBFF;">&#39;stats.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 生成的分析文件名称</span></span>
<span class="line"><span style="color:#E1E4E8;">      open: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否在生成后自动打开浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">      template: </span><span style="color:#9ECBFF;">&#39;treemap&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 可视化模板，可选 &#39;sunburst&#39;, &#39;network&#39;, &#39;treemap&#39;, &#39;raw-data&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      gzipSize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否显示 gzip 压缩后的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">      brotliSize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 是否显示 brotli 压缩后的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">visualizer</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup-plugin-visualizer&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">visualizer</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">filename:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;stats.html&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 生成的分析文件名称</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">open:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#008000;">// 是否在生成后自动打开浏览器</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">template:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;treemap&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 可视化模板，可选 &#39;sunburst&#39;, &#39;network&#39;, &#39;treemap&#39;, &#39;raw-data&#39;</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">gzipSize:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#008000;">// 是否显示 gzip 压缩后的大小</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">brotliSize:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;"> </span><span style="color:#008000;">// 是否显示 brotli 压缩后的大小</span></span>
<span class="line"><span style="color:#000000;">    })</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>配置项</p><ul><li><code>filename</code>: 生成的分析文件名称，默认为 <code>stats.html</code>。</li><li><code>open</code>: 是否在生成后自动打开浏览器，默认为 <code>false</code>。</li><li><code>template</code>: 可视化模板，可选 <code>&#39;sunburst&#39;</code>, <code>&#39;network&#39;</code>, <code>&#39;treemap&#39;</code>, <code>&#39;raw-data&#39;</code>，默认为 <code>&#39;treemap&#39;</code>。</li><li><code>gzipSize</code>: 是否显示 gzip 压缩后的大小，默认为 <code>false</code>。</li><li><code>brotliSize</code>: 是否显示 brotli 压缩后的大小，默认为 <code>false</code>。</li></ul><p>使用场景</p><ul><li><strong>优化打包体积</strong>：通过分析打包结果，找出体积较大的模块，进行优化或拆分。</li><li><strong>模块依赖分析</strong>：了解模块之间的依赖关系，优化模块结构。</li><li><strong>性能优化</strong>：通过分析 gzip 和 brotli 压缩后的体积，进一步优化加载性能。</li></ul><p>注意事项</p><ul><li>生成的 <code>stats.html</code> 文件通常较大，建议在开发环境中使用，避免在生产环境中生成。</li><li>如果项目使用了代码分割（Code Splitting），插件可以很好地展示各个 chunk 的体积和依赖关系。</li></ul><h2 id="打包css-rollup-plugin-postcss" tabindex="-1">打包css <strong>rollup-plugin-postcss</strong> <a class="header-anchor" href="#打包css-rollup-plugin-postcss" aria-label="Permalink to &quot;打包css **rollup-plugin-postcss**&quot;">​</a></h2><ol><li>首先搭建一个基础rollup工程</li><li>安装插件 <strong>npm i rollup-plugin-postcss -D</strong></li><li>添加配置,并在文件中使用css</li></ol><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/537bdb01cb124f4b927b8f5c29857ff0~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=XOn1efwzAwxiqQdIYb2Ed6t%2BTJk%3D" alt="image.png"> 4. 查看构建产物</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/d888f14101ab4fc394dab52aa9ea4578~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=JHXaOPQ9n%2BGt756oADyhcMSQBbM%3D" alt="image.png"></p><ul><li><code>extract: true</code>：将 CSS 提取到单独的文件中。如果设置为 <code>false</code>，CSS 将被嵌入到 JavaScript 文件中。</li><li><code>minimize: true</code>：压缩 CSS 文件。</li><li><code>plugins: []</code>：指定要使用的 PostCSS 插件。</li></ul><h2 id="代码分割" tabindex="-1">代码分割 <a class="header-anchor" href="#代码分割" aria-label="Permalink to &quot;代码分割&quot;">​</a></h2><ul><li>Rollup 默认情况下不会自动分割代码。它主要是将项目中的所有模块打包成一个单一的文件。这种方式在构建小型项目或者库时非常有用，因为它可以保持模块的依赖关系简单，并且生成的文件易于管理和部署。</li></ul><h3 id="使用import-函数分割代码" tabindex="-1">使用import 函数分割代码 <a class="header-anchor" href="#使用import-函数分割代码" aria-label="Permalink to &quot;使用import 函数分割代码&quot;">​</a></h3><ol><li>首先搭建一个基础rollup工程</li><li>增加一个util.js 并使用</li></ol><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/e0bbf7ba8a7b42cfb81a3ce12afe4437~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=gNSIPeVMTPV%2Fs8EhKXEtroNmwcQ%3D" alt="image.png"> 3. 修改配置文件</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/033d8042c7fa4544b13717586c9379b2~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=hlh%2BikCWV%2BZokUt556eA1q%2BtjGU%3D" alt="image.png"> 4. build并查看产物 这里其实就已经分割成两个js了 <img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/da950aa35e7d445d841d3d7afe2e7f8a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=OFS2gJHL6PgZaaQUPn9VsGBeZAU%3D" alt="image.png"> 注意 确保 Rollup 的输出格式设置为 <code>es</code> 或 <code>system</code>，因为这些格式支持代码分割。</p><p><strong><code>@rollup/plugin-commonjs</code> 和 <code>@rollup/plugin-node-resolve</code></strong>：如果项目中使用了 CommonJS 模块或 Node.js 模块，需要安装并配置这些插件。</p><h2 id="解析第三方路径以及配置文件扩展名" tabindex="-1">解析第三方路径以及配置文件扩展名 <a class="header-anchor" href="#解析第三方路径以及配置文件扩展名" aria-label="Permalink to &quot;解析第三方路径以及配置文件扩展名&quot;">​</a></h2><p>npm i @rollup/plugin-node-resolve rollup 解析第三方模块的路径。它能够自动查找并解析 node_modules 中的模块，确保 Rollup 能够正确打包这些依赖。</p><pre><code>import commonjs from &#39;@rollup/plugin-commonjs&#39;;
import resolve from &#39;@rollup/plugin-node-resolve&#39;;

export default {
  input: &#39;src/main.js&#39;,
  output: {
    dir: &#39;dist&#39;,
    format: &#39;es&#39;,
  },
  plugins: [resolve(), commonjs()],
};
</code></pre><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { nodeResolve } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nodeResolve</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 配置选项</span></span>
<span class="line"><span style="color:#E1E4E8;">      moduleDirectories: [</span><span style="color:#9ECBFF;">&#39;node_modules&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 指定模块目录</span></span>
<span class="line"><span style="color:#E1E4E8;">      extensions: [</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.json&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 解析的文件扩展名</span></span>
<span class="line"><span style="color:#E1E4E8;">      preferBuiltins: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 优先使用Node.js内置模块</span></span>
<span class="line"><span style="color:#E1E4E8;">      browser: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否在浏览器环境中使用</span></span>
<span class="line"><span style="color:#E1E4E8;">      dedupe: [</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 去重特定模块</span></span>
<span class="line"><span style="color:#E1E4E8;">      mainFields: [</span><span style="color:#9ECBFF;">&#39;module&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;main&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 指定package.json中的字段顺序</span></span>
<span class="line"><span style="color:#E1E4E8;">      jail: </span><span style="color:#9ECBFF;">&#39;/my/project&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 限制模块解析的根目录</span></span>
<span class="line"><span style="color:#E1E4E8;">      only: [</span><span style="color:#9ECBFF;">&#39;some-module&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 只解析指定的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">      customResolveOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 自定义解析选项</span></span>
<span class="line"><span style="color:#E1E4E8;">        moduleDirectory: </span><span style="color:#9ECBFF;">&#39;my_modules&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">nodeResolve</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  ...</span></span>
<span class="line"><span style="color:#000000;">  plugins: [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">nodeResolve</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#008000;">// 配置选项</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">moduleDirectories:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;node_modules&#39;</span><span style="color:#000000;">], </span><span style="color:#008000;">// 指定模块目录</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">extensions:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;.js&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;.json&#39;</span><span style="color:#000000;">], </span><span style="color:#008000;">// 解析的文件扩展名</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">preferBuiltins:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#008000;">// 优先使用Node.js内置模块</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">browser:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">false</span><span style="color:#000000;">, </span><span style="color:#008000;">// 是否在浏览器环境中使用</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">dedupe:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;lodash&#39;</span><span style="color:#000000;">], </span><span style="color:#008000;">// 去重特定模块</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">mainFields:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;module&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;main&#39;</span><span style="color:#000000;">], </span><span style="color:#008000;">// 指定package.json中的字段顺序</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">jail:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;/my/project&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 限制模块解析的根目录</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">only:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;some-module&#39;</span><span style="color:#000000;">], </span><span style="color:#008000;">// 只解析指定的模块</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">customResolveOptions:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#008000;">// 自定义解析选项</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">moduleDirectory:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;my_modules&#39;</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">    })</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><ul><li>当项目依赖第三方模块时，使用该插件可以确保 Rollup 能够正确解析这些模块的路径。</li><li>在构建浏览器端应用时，可以通过 <code>browser</code> 选项优先使用浏览器兼容的模块版本。</li><li>在需要去重模块或限制模块解析范围时，可以使用 <code>dedupe</code> 和 <code>jail</code> 选项。</li></ul><blockquote><p><strong>moduleDirectories</strong>: 指定模块查找的目录，默认是 <code>[&#39;node_modules&#39;]</code>。<br><strong>extensions</strong>: 指定解析的文件扩展名，默认是 <code>[&#39;.js&#39;, &#39;.json&#39;, &#39;.node&#39;]</code>。<br><strong>preferBuiltins</strong>: 如果设置为 <code>true</code>，插件会优先使用 Node.js 内置模块而不是 <code>node_modules</code> 中的模块。<br><strong>browser</strong>: 如果设置为 <code>true</code>，插件会优先使用 <code>browser</code> 字段指定的模块版本。<br><strong>dedupe</strong>: 去重特定模块，避免重复打包。<br><strong>mainFields</strong>: 指定 <code>package.json</code> 中的字段顺序，默认是 <code>[&#39;module&#39;, &#39;main&#39;]</code>。<br><strong>jail</strong>: 限制模块解析的根目录，防止解析到项目外的模块。<br><strong>only</strong>: 只解析指定的模块，其他模块将被忽略。<br><strong>customResolveOptions</strong>: 自定义解析选项，可以指定模块目录等。</p></blockquote><p>注意</p><ul><li>如果项目中使用了 ES 模块和 CommonJS 模块混合的情况，确保 <code>mainFields</code> 配置正确。</li><li>在浏览器环境中使用时，注意 <code>browser</code> 选项的设置，以避免使用不兼容的模块版本。</li></ul><h2 id="babel插件-语法降级-rollup-plugin-babel-babel-core-babel-preset-env" tabindex="-1">babel插件(语法降级) @rollup/plugin-babel @babel/core @babel/preset-env <a class="header-anchor" href="#babel插件-语法降级-rollup-plugin-babel-babel-core-babel-preset-env" aria-label="Permalink to &quot;babel插件(语法降级)  @rollup/plugin-babel @babel/core @babel/preset-env&quot;">​</a></h2><ol><li>安装依赖</li></ol><pre><code>npm install  @rollup/plugin-babel @babel/core @babel/preset-env -D
</code></pre><ol start="2"><li>添加babel配置文件 在项目根目录下创建一个 <code>.babelrc</code> 文件，配置 Babel 的预设：</li></ol><pre><code>{
  &quot;presets&quot;: [&quot;@babel/preset-env&quot;]
}
</code></pre><ol start="3"><li>使用插件</li></ol><p>在 <code>rollup.config.js</code> 中引入 <code>@rollup/plugin-babel</code> 插件，并将其添加到 <code>plugins</code> 数组中。<code>babelHelpers</code> 选项用于指定 Babel 辅助函数的处理方式，<code>bundled</code> 表示将辅助函数打包到输出文件中。<code>exclude</code> 选项用于排除 <code>node_modules</code> 目录下的文件，避免对第三方库进行不必要的转译。</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/b02abd815126485888a99b13f00cb304~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5a6J5Yip5ZCbX0FuTGlqdW4=:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMjUwMjk2MDY4NjA0MDI4NiJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1737871278&amp;x-orig-sign=u2SYlr6luTJg5pZb%2BlwcCa7GAOw%3D" alt="image.png"></p><blockquote><p><strong>babelHelpers</strong> |string | 定如何处理 Babel 辅助函数，可选项有 <code>&#39;bundled&#39;</code>、<code>&#39;runtime&#39;</code>、<code>&#39;inline&#39;</code>、<code>&#39;external&#39;</code></p></blockquote><p>当设置为 <code>&#39;runtime&#39;</code> 时，会使用 <code>@babel/plugin-transform-runtime</code> 来避免重复的辅助函数代码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            babelHelpers: </span><span style="color:#9ECBFF;">&#39;runtime&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">babelHelpers:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;runtime&#39;</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><blockquote><p><strong>include</strong> | <code>string | string[] | RegExp | RegExp[]</code>。| 指定要包含在 Babel 处理范围内的文件，可使用文件路径、文件路径数组、正则表达式或正则表达式数组。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            include: </span><span style="color:#9ECBFF;">&#39;src/**/*.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">include:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/**/*.js&#39;</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><blockquote><p><strong>exclude</strong> | string | string[] | RegExp | RegExp[] | 指定要排除在 Babel 处理范围外的文件，可使用文件路径、文件路径数组、正则表达式或正则表达式数组。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({ </span><span style="color:#6A737D;">// 这样可以防止 Babel 处理 \`node_modules\` 中的文件，避免不必要的处理和潜在的问题。</span></span>
<span class="line"><span style="color:#E1E4E8;">            exclude: </span><span style="color:#9ECBFF;">&#39;node_modules/**&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({ </span><span style="color:#008000;">// 这样可以防止 Babel 处理 \`node_modules\` 中的文件，避免不必要的处理和潜在的问题。</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">exclude:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;node_modules/**&#39;</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><blockquote><p><strong>extensions</strong> | [ ]string | 描述：指定要处理的文件扩展名，默认为 <code>[&#39;.js&#39;, &#39;.jsx&#39;, &#39;.es6&#39;, &#39;.es&#39;, &#39;.mjs&#39;]</code>。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            extensions: [</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.jsx&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.tsx&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">extensions:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;.js&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;.jsx&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;.ts&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;.tsx&#39;</span><span style="color:#000000;">]</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>注意 可将 <code>.ts</code> 和 <code>.tsx</code> 等扩展名添加到 Babel 的处理范围中</p><blockquote><p><strong>presets</strong> | Array&lt;&gt; | Babel 预设，可使用 <code>@babel/preset-env</code> 等预设进行不同的转译。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            presets: [[</span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">, { targets: { node: </span><span style="color:#9ECBFF;">&#39;current&#39;</span><span style="color:#E1E4E8;"> } }]]</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">presets:</span><span style="color:#000000;"> [[</span><span style="color:#A31515;">&#39;@babel/preset-env&#39;</span><span style="color:#000000;">, { </span><span style="color:#001080;">targets:</span><span style="color:#000000;"> { </span><span style="color:#001080;">node:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;current&#39;</span><span style="color:#000000;"> } }]]</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><blockquote><p><strong>plugins</strong> | Array | Babel 插件，可使用 <code>@babel/plugin-proposal-class-properties</code> 等插件进行特定的语言特性转译。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            plugins: [</span><span style="color:#9ECBFF;">&#39;@babel/plugin-proposal-class-properties&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;@babel/plugin-proposal-class-properties&#39;</span><span style="color:#000000;">]</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><blockquote><p>sourceMap |Boolean | 是否生成源映射，默认为 <code>false</code>。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            sourceMap: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//源映射可方便在开发过程中进行调试。</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">sourceMap:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;"> </span><span style="color:#008000;">//源映射可方便在开发过程中进行调试。</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><blockquote><p><strong>compact</strong> | boolean | 是否压缩输出代码，默认为 <code>false</code>。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> babel </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            compact: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">babel</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">compact:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="cjs-转esm-rollup-plugin-commonjs" tabindex="-1">Cjs 转ESM @rollup/plugin-commonjs <a class="header-anchor" href="#cjs-转esm-rollup-plugin-commonjs" aria-label="Permalink to &quot;Cjs 转ESM @rollup/plugin-commonjs&quot;">​</a></h2><p>npm i @rollup/plugin-commonjs</p><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  ...</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">commonjs</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#000000;">  ],</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p><strong>结合其他插件</strong>：通常，<code>@rollup/plugin-commonjs</code> 会与其他插件一起使用，例如 <code>@rollup/plugin-node-resolve</code> 和 <code>@rollup/plugin-babel</code>。<code>@rollup/plugin-node-resolve</code> 用于解析 node_modules 中的模块，而 <code>@rollup/plugin-babel</code> 用于使用 Babel 转换代码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { nodeResolve } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { babel } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nodeResolve</span><span style="color:#E1E4E8;">(), </span><span style="color:#6A737D;">//路径解析</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">(),    </span><span style="color:#6A737D;">// cjs 转esm</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">babel</span><span style="color:#E1E4E8;">({ babelHelpers: </span><span style="color:#9ECBFF;">&#39;bundled&#39;</span><span style="color:#E1E4E8;"> }),</span><span style="color:#6A737D;">// es6+ =&gt;ES5</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">commonjs</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">nodeResolve</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">babel</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-babel&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/index.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">nodeResolve</span><span style="color:#000000;">(), </span><span style="color:#008000;">//路径解析</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">commonjs</span><span style="color:#000000;">(),    </span><span style="color:#008000;">// cjs 转esm</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">babel</span><span style="color:#000000;">({ </span><span style="color:#001080;">babelHelpers:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundled&#39;</span><span style="color:#000000;"> }),</span><span style="color:#008000;">// es6+ =&gt;ES5</span></span>
<span class="line"><span style="color:#000000;">  ],</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>注意</p><ul><li><strong>顺序问题</strong>：在配置 Rollup 插件时，插件的顺序非常重要。通常，<code>@rollup/plugin-node-resolve</code> 应该放在 <code>@rollup/plugin-commonjs</code> 之前，因为需要先解析模块路径，然后再进行 CommonJS 转换。</li><li><strong>动态导入</strong>：如果你在项目中使用动态导入（<code>import()</code>），<code>@rollup/plugin-commonjs</code> 可能无法正确处理这些动态导入的模块。在这种情况下，你可能需要手动调整配置或使用其他插件来处理这些模块。</li></ul><h2 id="结合ts-rollup-plugin-typescript" tabindex="-1">结合ts @rollup/plugin-typescript <a class="header-anchor" href="#结合ts-rollup-plugin-typescript" aria-label="Permalink to &quot;结合ts @rollup/plugin-typescript&quot;">​</a></h2><ol><li>安装依赖 npm install @rollup/plugin-typescript typescript -D</li><li>配置</li></ol><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> typescript </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-typescript&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定入口文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 输出文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 输出格式</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">typescript</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 使用 TypeScript 插件</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">typescript</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-typescript&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/index.ts&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 指定入口文件</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 输出文件路径</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span><span style="color:#000000;"> </span><span style="color:#008000;">// 输出格式</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">typescript</span><span style="color:#000000;">() </span><span style="color:#008000;">// 使用 TypeScript 插件</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><ol start="3"><li>配置tsOptions</li></ol><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">typescript</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  tsconfig: </span><span style="color:#9ECBFF;">&#39;./tsconfig.json&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定 tsconfig 文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  include: [</span><span style="color:#9ECBFF;">&#39;src/**/*.ts&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 包含的文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  exclude: [</span><span style="color:#9ECBFF;">&#39;node_modules/**&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 排除的文件</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">typescript</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">tsconfig:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;./tsconfig.json&#39;</span><span style="color:#000000;">, </span><span style="color:#008000;">// 指定 tsconfig 文件路径</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">include:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;src/**/*.ts&#39;</span><span style="color:#000000;">], </span><span style="color:#008000;">// 包含的文件</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">exclude:</span><span style="color:#000000;"> [</span><span style="color:#A31515;">&#39;node_modules/**&#39;</span><span style="color:#000000;">] </span><span style="color:#008000;">// 排除的文件</span></span>
<span class="line"><span style="color:#000000;">})</span></span></code></pre></div><h2 id="构建dts-rollup-plugin-dts" tabindex="-1">构建Dts rollup-plugin-dts <a class="header-anchor" href="#构建dts-rollup-plugin-dts" aria-label="Permalink to &quot;构建Dts rollup-plugin-dts&quot;">​</a></h2><ol><li>安装依赖 npm i rollup-plugin-dts</li><li>使用</li></ol><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> dts </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-dts&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;./src/index.d.ts&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;./dist/index.d.ts&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }],</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#B392F0;">dts</span><span style="color:#E1E4E8;">()]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#008000;">// rollup.config.js</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">dts</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup-plugin-dts&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;./src/index.d.ts&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> [{</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;./dist/index.d.ts&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#000000;">  }],</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span><span style="color:#795E26;">dts</span><span style="color:#000000;">()]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><h2 id="替换代码-rollup-plugin-replace" tabindex="-1">替换代码 @rollup/plugin-replace <a class="header-anchor" href="#替换代码-rollup-plugin-replace" aria-label="Permalink to &quot;替换代码  @rollup/plugin-replace&quot;">​</a></h2><ol><li>安装依赖 npm i @rollup/plugin-replace</li><li>使用</li></ol><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> replace </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-replace&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;p<wbr>rocess.env.NODE_ENV&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">__buildDate__</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">      __buildVersion__: </span><span style="color:#9ECBFF;">&#39;1.0.0&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">replace</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-replace&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">replace</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#A31515;">&#39;p<wbr>rocess.env.NODE_ENV&#39;</span><span style="color:#001080;">:</span><span style="color:#000000;"> </span><span style="color:#0070C1;">JSON</span><span style="color:#000000;">.</span><span style="color:#795E26;">stringify</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;production&#39;</span><span style="color:#000000;">),</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#795E26;">__buildDate__</span><span style="color:#001080;">:</span><span style="color:#000000;"> () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#0070C1;">JSON</span><span style="color:#000000;">.</span><span style="color:#795E26;">stringify</span><span style="color:#000000;">(</span><span style="color:#0000FF;">new</span><span style="color:#000000;"> </span><span style="color:#795E26;">Date</span><span style="color:#000000;">()),</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">__buildVersion__:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;1.0.0&#39;</span></span>
<span class="line"><span style="color:#000000;">    })</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>在 Rollup 配置文件中，通过 <code>replace</code> 函数来配置插件。<code>replace</code> 函数接受一个对象作为参数，对象的键值对表示需要替换的内容。</p><ul><li><strong>键</strong>：表示需要替换的字符串或正则表达式。</li><li><strong>值</strong>：表示替换后的内容。可以是字符串、函数或对象。</li></ul><p>注意</p><ul><li><strong>字符串替换</strong>：如果替换的内容是字符串，确保使用 <code>JSON.stringify</code> 来避免语法错误。</li><li><strong>函数替换</strong>：如果替换的内容是函数，函数会在打包时执行，返回的值将作为替换内容。</li><li><strong>正则表达式</strong>：可以使用正则表达式来匹配更复杂的字符串模式。</li></ul><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> filesize </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-filesize&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">filesize</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">filesize</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup-plugin-filesize&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">filesize</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>配置项</p><ul><li><code>showMinifiedSize</code>: 是否显示压缩后的大小，默认为 <code>true</code>。</li><li><code>showGzippedSize</code>: 是否显示 Gzip 压缩后的大小，默认为 <code>true</code>。</li><li><code>showBrotliSize</code>: 是否显示 Brotli 压缩后的大小，默认为 <code>false</code>。</li><li></li></ul><p>当你运行 Rollup 打包时，<code>rollup-plugin-filesize</code> 插件会在终端输出类似以下的信息：</p><pre><code>dist/bundle.js: 1.23 KB (gzipped: 456 B)
</code></pre><h2 id="打包大小-rollup-plugin-filesize" tabindex="-1">打包大小 <code>rollup-plugin-filesize</code> <a class="header-anchor" href="#打包大小-rollup-plugin-filesize" aria-label="Permalink to &quot;打包大小 \`rollup-plugin-filesize\`&quot;">​</a></h2><p><code>rollup-plugin-filesize</code> 是一个 Rollup 插件，用于在打包过程中显示生成的文件大小信息。它可以帮助开发者了解打包后的文件大小，从而优化代码和资源。</p><ol><li>安装依赖 npm install rollup-plugin-filesize --save-dev</li></ol><h2 id="copy文件插件-rollup-plugin-copy" tabindex="-1">copy文件插件 <code>rollup-plugin-copy</code> <a class="header-anchor" href="#copy文件插件-rollup-plugin-copy" aria-label="Permalink to &quot;copy文件插件  \`rollup-plugin-copy\`&quot;">​</a></h2><p>可以在打包时候将文件进行copy</p><ol><li>安装 npm install rollup-plugin-copy -D</li><li>配置</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> copy </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-copy&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      targets: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        { src: </span><span style="color:#9ECBFF;">&#39;src/assets/*&#39;</span><span style="color:#E1E4E8;">, dest: </span><span style="color:#9ECBFF;">&#39;dist/assets&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        { src: </span><span style="color:#9ECBFF;">&#39;src/fonts/*&#39;</span><span style="color:#E1E4E8;">, dest: </span><span style="color:#9ECBFF;">&#39;dist/fonts&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">copy</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup-plugin-copy&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">copy</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">targets:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        { </span><span style="color:#001080;">src:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/assets/*&#39;</span><span style="color:#000000;">, </span><span style="color:#001080;">dest:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/assets&#39;</span><span style="color:#000000;"> },</span></span>
<span class="line"><span style="color:#000000;">        { </span><span style="color:#001080;">src:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/fonts/*&#39;</span><span style="color:#000000;">, </span><span style="color:#001080;">dest:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/fonts&#39;</span><span style="color:#000000;"> }</span></span>
<span class="line"><span style="color:#000000;">      ]</span></span>
<span class="line"><span style="color:#000000;">    })</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p><code>targets</code>，它是一个数组，每个元素都是一个对象，包含 <code>src</code> 和 <code>dest</code> 属性。</p><ul><li><code>src</code>: 指定要复制的文件或文件夹路径，支持 glob 模式。</li><li><code>dest</code>: 指定文件或文件夹复制到的目标路径。</li></ul><h2 id="scss-rollup-plugin-scss" tabindex="-1">scss rollup-plugin-scss <a class="header-anchor" href="#scss-rollup-plugin-scss" aria-label="Permalink to &quot;scss  rollup-plugin-scss&quot;">​</a></h2><ol><li>安装依赖 npm install rollup-plugin-scss -D</li><li>配置</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> scss </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-scss&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scss</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      output: </span><span style="color:#9ECBFF;">&#39;dist/bundle.css&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      failOnError: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      outputStyle: </span><span style="color:#9ECBFF;">&#39;compressed&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">scss</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup-plugin-scss&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">scss</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">output:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.css&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">failOnError:</span><span style="color:#000000;"> </span><span style="color:#0000FF;">true</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">      </span><span style="color:#001080;">outputStyle:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;compressed&#39;</span></span>
<span class="line"><span style="color:#000000;">    })</span></span>
<span class="line"><span style="color:#000000;">  ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>配置项</p><ul><li><strong>output</strong>: 指定生成的 CSS 文件的输出路径和文件名。例如，<code>output: &#39;dist/bundle.css&#39;</code> 会将生成的 CSS 文件输出到 <code>dist</code> 目录下，并命名为 <code>bundle.css</code>。</li><li><strong>failOnError</strong>: 设置为 <code>true</code> 时，如果 SCSS 编译过程中出现错误，Rollup 构建会失败。默认为 <code>false</code>。</li><li><strong>outputStyle</strong>: 控制生成的 CSS 文件的压缩方式。例如，<code>outputStyle: &#39;compressed&#39;</code> 会生成压缩后的 CSS 文件。其他可选值包括 <code>expanded</code>、<code>nested</code> 和 <code>compact</code>。</li></ul><h2 id="postcss-rollup-plugin-postcs-autoprefixer" tabindex="-1">postCss rollup-plugin-postcs autoprefixer <a class="header-anchor" href="#postcss-rollup-plugin-postcs-autoprefixer" aria-label="Permalink to &quot;postCss rollup-plugin-postcs  autoprefixer&quot;">​</a></h2><p>rollup-plugin-postcs 可以优雅降级css autoprefixer 可以帮助我们自动加浏览器前缀</p><ol><li>安装依赖 npm install rollup-plugin-postcss autoprefixer -D</li></ol><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> postcss </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;rollup-plugin-postcss&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">postcss</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 配置选项</span></span>
<span class="line"><span style="color:#E1E4E8;">            plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">autoprefixer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">postcss</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;rollup-plugin-postcss&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/index.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span></span>
<span class="line"><span style="color:#000000;">    },</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">postcss</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#008000;">// 配置选项</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#795E26;">autoprefixer</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">            ]</span></span>
<span class="line"><span style="color:#000000;">        })</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><ul><li><strong>extract</strong>： <ul><li>类型：<code>boolean | string</code>。</li><li>描述：是否提取 CSS 文件，若为 <code>true</code> 会根据输入文件名生成，也可以指定文件名。</li><li>示例：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">postcss</span><span style="color:#E1E4E8;">({ extract: </span><span style="color:#9ECBFF;">&#39;styles.css&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">postcss</span><span style="color:#000000;">({ </span><span style="color:#001080;">extract:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;styles.css&#39;</span><span style="color:#000000;"> })</span></span></code></pre></div></li><li><strong>plugins</strong>： <ul><li>类型：<code>Array&lt;Function&gt;</code>。</li><li>描述：PostCSS 插件数组，可添加 <code>autoprefixer</code>、<code>cssnano</code> 等。</li></ul></li><li><strong>modules</strong>： <ul><li>类型：<code>boolean</code>。</li><li>描述：是否启用 CSS 模块。</li></ul></li><li><strong>process</strong>： <ul><li>类型：<code>Function</code>。</li><li>描述：自定义处理函数，接收 <code>(css, map) =&gt; ({ code, map })</code> 作为参数，用于自定义 CSS 处理。</li></ul></li><li><strong>minimize</strong>： <ul><li>类型：<code>boolean</code>。</li><li>描述：是否压缩 CSS。</li></ul></li><li><strong>sourceMap</strong>： <ul><li>类型：<code>boolean</code>。</li><li>描述：是否生成源映射。</li></ul></li><li><strong>include</strong>： <ul><li>类型：<code>string | RegExp | (string | RegExp)[]</code>。</li><li>描述：包含哪些文件，可使用文件路径、正则表达式或数组。</li></ul></li><li><strong>exclude</strong>： <ul><li>类型：<code>string | RegExp | (string | RegExp)[]</code>。</li><li>描述：排除哪些文件，可使用文件路径、正则表达式或数组。</li></ul></li><li><strong><code>plugins</code></strong>: 这是一个数组，用于指定要使用的 PostCSS 插件。例如，<code>autoprefixer</code> 可以自动为 CSS 添加浏览器前缀。</li><li><strong><code>extract</code></strong>: 如果设置为 <code>true</code>，插件会将 CSS 提取到一个单独的文件中，而不是将其内联到 JavaScript 文件中。</li><li><strong><code>minimize</code></strong>: 如果设置为 <code>true</code>，插件会压缩生成的 CSS 文件。</li></ul><h2 id="处理图片-rollup-plugin-image" tabindex="-1">处理图片 @rollup/plugin-image <a class="header-anchor" href="#处理图片-rollup-plugin-image" aria-label="Permalink to &quot;处理图片 @rollup/plugin-image&quot;">​</a></h2><ol><li>安装依赖 npm i @rollup/plugin-image -D</li><li>进行配置</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> image </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-image&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { nodeResolve } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/main.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">image</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">nodeResolve</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">image</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-image&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">nodeResolve</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-node-resolve&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> </span><span style="color:#001080;">commonjs</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">from</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> </span><span style="color:#AF00DB;">default</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">input:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;src/main.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">output:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">file:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;dist/bundle.js&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">format:</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;cjs&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">  },</span></span>
<span class="line"><span style="color:#000000;">  </span><span style="color:#001080;">plugins:</span><span style="color:#000000;"> [</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">image</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">nodeResolve</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">commonjs</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#000000;">  ],</span></span>
<span class="line"><span style="color:#000000;">};</span></span></code></pre></div><p>配置项</p><ul><li><strong><code>image()</code></strong> : 这是 <code>@rollup/plugin-image</code> 插件的调用，它会自动处理项目中的图片文件。</li><li><strong><code>nodeResolve()</code></strong> : 这个插件用于解析模块路径，确保 Rollup 能够正确找到依赖的模块。</li><li><strong><code>commonjs()</code></strong> : 这个插件用于将 CommonJS 模块转换为 ES6 模块，以便 Rollup 能够处理。</li></ul><p>使用场景</p><ul><li><strong>小图片</strong>: 对于较小的图片，直接将其转换为 Base64 编码并嵌入到 JavaScript 文件中可以减少 HTTP 请求，提升页面加载速度。</li><li><strong>大图片</strong>: 对于较大的图片，建议使用 <code>@rollup/plugin-url</code> 插件，将图片文件输出到指定目录，并在代码中引用其路径。</li></ul><p>npm i @rollup/plugin-url</p><pre><code>import url from &#39;@rollup/plugin-url&#39;;

export default {
  input: &#39;src/main.js&#39;,
  output: {
    file: &#39;dist/bundle.js&#39;,
    format: &#39;cjs&#39;,
  },
  plugins: [
    url({
      limit: 10 * 1024, // 10KB 以下的文件转换为 Base64
      include: [&#39;**/*.png&#39;, &#39;**/*.jpg&#39;], // 只处理 PNG 和 JPG 文件
      emitFiles: true, // 将文件输出到指定目录
    }),
    nodeResolve(),
    commonjs(),
  ],
};
</code></pre>`,126),e=[o];function c(t,r,i,y,E,d){return n(),a("div",null,e)}const b=s(p,[["render",c]]);export{g as __pageData,b as default};
