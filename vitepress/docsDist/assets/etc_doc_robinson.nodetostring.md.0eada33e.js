import{_ as s,o as n,c as o,Q as a}from"./chunks/framework.a333c6fb.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/robinson.nodetostring.md","filePath":"etc/doc/robinson.nodetostring.md"}'),e={name:"etc/doc/robinson.nodetostring.md"},t=a(`<p><a href="./">Home</a> &gt; <a href="./robinson.html">robinson</a> &gt; <a href="./robinson.nodetostring.html">nodeToString</a></p><h2 id="nodetostring-function" tabindex="-1">nodeToString() function <a class="header-anchor" href="#nodetostring-function" aria-label="Permalink to &quot;nodeToString() function&quot;">​</a></h2><blockquote><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></blockquote><p>函数 <code>nodeToString</code> 接受一个 HTML 元素并返回它的字符串表示形式。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nodeToString</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Element</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#000000;"> </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> </span><span style="color:#795E26;">nodeToString</span><span style="color:#000000;">(</span><span style="color:#001080;">node</span><span style="color:#000000;">: </span><span style="color:#267F99;">Element</span><span style="color:#000000;">): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>node</td><td>Element</td><td><code>node</code> 参数的类型为 <code>Element</code>，它表示 DOM（文档对象模型）中的 HTML 元素。它可以是任何 HTML元素</td></tr></tbody></table><p><strong>Returns:</strong></p><p>string</p><p>所提供的 HTML 元素的字符串表示形式。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">nodeToString</span><span style="color:#E1E4E8;">(div) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">   </span><span style="color:#0000FF;">let</span><span style="color:#000000;"> </span><span style="color:#001080;">div</span><span style="color:#000000;"> =</span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">createElement</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;div&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">   </span><span style="color:#795E26;">nodeToString</span><span style="color:#000000;">(</span><span style="color:#001080;">div</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> </span><span style="color:#A31515;">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span></span></code></pre></div>`,13),p=[t];function l(r,c,i,d,y,E){return n(),o("div",null,p)}const m=s(e,[["render",l]]);export{g as __pageData,m as default};
