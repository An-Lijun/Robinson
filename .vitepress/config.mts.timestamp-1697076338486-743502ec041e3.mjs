// .vitepress/config.mts
import { basename } from "path";
import { defineConfig } from "file:///C:/Users/19213/Desktop/openSource/node_modules/.pnpm/vitepress@1.0.0-rc.20_@algolia+client-search@4.20.0_@types+node@20.6.4_search-insights@2.8.3/node_modules/vitepress/dist/node/index.js";
import fg from "file:///C:/Users/19213/Desktop/openSource/node_modules/.pnpm/fast-glob@3.3.1/node_modules/fast-glob/out/index.js";
function resolveTitle(title) {
  title === "doc" ? title : title.replace("doc.", "");
  title === "etc" ? title : title.replace("etc.", "");
  return title;
}
function getTree(file, prefix, tree2 = {}) {
  const [cur, ...rest] = file.replace(".md", "").split(".");
  const curPath = prefix + cur;
  if (!tree2[curPath]) {
    tree2[curPath] = {
      link: "/etc/doc/" + curPath + ".md"
      // link:  curPath + '.md',
    };
  }
  if (rest.length > 0) {
    if (!tree2[curPath].items) {
      tree2[curPath].items = {};
    }
    getTree(rest.join("."), curPath + ".", tree2[curPath].items);
  }
}
function treeToItems(tree2) {
  const items = [];
  Object.keys(tree2).forEach((key) => {
    const item = {
      text: resolveTitle(key),
      link: tree2[key].link
    };
    if (tree2[key].items) {
      if (!item.items) {
        item.items = [];
      }
      item.items.push(...treeToItems(tree2[key].items));
    }
    items.push(item);
  });
  return items;
}
var tree = fg.sync(["./etc/doc/**/*.md"]).map((path) => basename(path)).reduce((tree2, file) => {
  getTree(file, "", tree2);
  return tree2;
}, {});
var docs = treeToItems(tree);
var config_default = defineConfig({
  title: "Robinson",
  description: "Documentations of @taiyuuki/utils",
  base: "/",
  outDir: "./dist/doc",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: [
      { text: "\u4E3B\u9875", link: "/index.html" },
      { text: "API", link: "/etc/doc/index.html" }
    ],
    sidebar: [
      {
        text: "API",
        items: docs
      }
    ],
    socialLinks: [
      { icon: "github", link: "https://github.com/An-Lijun/Robinson" }
      // 这里要替换成你自己的仓库地址
    ],
    search: {
      provider: "local"
    },
    footer: {
      message: "Released under the MIT License.",
      copyright: "Copyright \xA9 2023-present Anlijun"
    }
  },
  markdown: {
    theme: {
      light: "light-plus",
      dark: "github-dark"
    }
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLnZpdGVwcmVzcy9jb25maWcubXRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcMTkyMTNcXFxcRGVza3RvcFxcXFxvcGVuU291cmNlXFxcXHBhY2thZ2VzXFxcXFJvYmluc29uXFxcXC52aXRlcHJlc3NcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXDE5MjEzXFxcXERlc2t0b3BcXFxcb3BlblNvdXJjZVxcXFxwYWNrYWdlc1xcXFxSb2JpbnNvblxcXFwudml0ZXByZXNzXFxcXGNvbmZpZy5tdHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzLzE5MjEzL0Rlc2t0b3Avb3BlblNvdXJjZS9wYWNrYWdlcy9Sb2JpbnNvbi8udml0ZXByZXNzL2NvbmZpZy5tdHNcIjtpbXBvcnQgeyBiYXNlbmFtZSB9IGZyb20gJ3BhdGgnXHJcbmltcG9ydCB0eXBlIHsgRGVmYXVsdFRoZW1lIH0gZnJvbSAndml0ZXByZXNzJ1xyXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlcHJlc3MnXHJcblxyXG5pbXBvcnQgZmcgZnJvbSAnZmFzdC1nbG9iJ1xyXG5cclxuaW50ZXJmYWNlIEluZGV4VHJlZSB7XHJcbiAgW2luZGV4OiBzdHJpbmddOiB7XHJcbiAgICAgIGxpbms6IHN0cmluZ1xyXG4gICAgICBpdGVtcz86IEluZGV4VHJlZVxyXG4gIH1cclxufVxyXG5cclxuLy8gXHU3NkVFXHU1RjU1XHU2ODA3XHU5ODk4XHU1M0JCXHU5NjY0dXRpbHMuXHU1MjREXHU3RjAwXHJcbmZ1bmN0aW9uIHJlc29sdmVUaXRsZSh0aXRsZTogc3RyaW5nKSB7XHJcbiAgIHRpdGxlID09PSAnZG9jJyA/IHRpdGxlIDogdGl0bGUucmVwbGFjZSgnZG9jLicsICcnKVxyXG4gICB0aXRsZSA9PT0gJ2V0YycgPyB0aXRsZSA6IHRpdGxlLnJlcGxhY2UoJ2V0Yy4nLCAnJylcclxuXHJcbiAgIHJldHVybiB0aXRsZVxyXG59XHJcblxyXG4vLyBcdTVDMDZtZFx1NjU4N1x1Njg2M1x1NTIxN1x1ODg2OFx1OEY2Q1x1NEUzQVx1NjgxMVx1N0VEM1x1Njc4NFxyXG5mdW5jdGlvbiBnZXRUcmVlKGZpbGU6IHN0cmluZywgcHJlZml4OiBzdHJpbmcsIHRyZWUgPSB7fSkge1xyXG4gIGNvbnN0IFsgY3VyLCAuLi5yZXN0IF0gPSBmaWxlLnJlcGxhY2UoJy5tZCcsICcnKS5zcGxpdCgnLicpXHJcbiAgY29uc3QgY3VyUGF0aCA9IHByZWZpeCArIGN1clxyXG4gIGlmICghdHJlZVtjdXJQYXRoXSkge1xyXG4gICAgICB0cmVlW2N1clBhdGhdID0ge1xyXG4gICAgICAgICAgbGluazogJy9ldGMvZG9jLycgKyBjdXJQYXRoICsgJy5tZCcsXHJcbiAgICAgICAgLy8gbGluazogIGN1clBhdGggKyAnLm1kJyxcclxuICAgICAgfVxyXG4gIH1cclxuICBpZiAocmVzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlmICghdHJlZVtjdXJQYXRoXS5pdGVtcykge1xyXG4gICAgICAgICAgdHJlZVtjdXJQYXRoXS5pdGVtcyA9IHt9XHJcbiAgICAgIH1cclxuICAgICAgZ2V0VHJlZShyZXN0LmpvaW4oJy4nKSwgY3VyUGF0aCArICcuJywgdHJlZVtjdXJQYXRoXS5pdGVtcylcclxuICB9XHJcbn1cclxuXHJcbi8vIFx1NUMwNlx1NjgxMVx1N0VEM1x1Njc4NFx1OEY2Q1x1NEUzQVx1NzZFRVx1NUY1NVx1NjU3MFx1N0VDNFxyXG5mdW5jdGlvbiB0cmVlVG9JdGVtcyh0cmVlOiBJbmRleFRyZWUpIHtcclxuICBjb25zdCBpdGVtczogRGVmYXVsdFRoZW1lLlNpZGViYXJJdGVtW10gPSBbXVxyXG4gIE9iamVjdC5rZXlzKHRyZWUpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtOiBEZWZhdWx0VGhlbWUuU2lkZWJhckl0ZW0gPSB7XHJcbiAgICAgICAgICB0ZXh0OiByZXNvbHZlVGl0bGUoa2V5KSxcclxuICAgICAgICAgIGxpbms6IHRyZWVba2V5XS5saW5rLFxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0cmVlW2tleV0uaXRlbXMpIHtcclxuICAgICAgICAgIGlmICghaXRlbS5pdGVtcykge1xyXG4gICAgICAgICAgICAgIGl0ZW0uaXRlbXMgPSBbXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaXRlbS5pdGVtcy5wdXNoKC4uLnRyZWVUb0l0ZW1zKHRyZWVba2V5XS5pdGVtcyEpKVxyXG4gICAgICB9XHJcbiAgICAgIGl0ZW1zLnB1c2goaXRlbSlcclxuICB9KVxyXG4gIHJldHVybiBpdGVtc1xyXG59XHJcblxyXG5jb25zdCB0cmVlXHJcbj0gZmcuc3luYyhbJy4vZXRjL2RvYy8qKi8qLm1kJ10pXHJcbiAgLm1hcCgocGF0aCkgPT4gYmFzZW5hbWUocGF0aCkpXHJcbiAgLnJlZHVjZSgodHJlZSwgZmlsZSkgPT4ge1xyXG4gICAgICBnZXRUcmVlKGZpbGUsICcnLCB0cmVlKVxyXG4gICAgICByZXR1cm4gdHJlZVxyXG4gIH0sIHt9KVxyXG4gIFxyXG5cclxuY29uc3QgZG9jczogRGVmYXVsdFRoZW1lLlNpZGViYXJJdGVtW10gPSB0cmVlVG9JdGVtcyh0cmVlKVxyXG5cclxuLy8gaHR0cHM6Ly92aXRlcHJlc3MuZGV2L3JlZmVyZW5jZS9zaXRlLWNvbmZpZ1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIHRpdGxlOiAnUm9iaW5zb24nLFxyXG4gIGRlc2NyaXB0aW9uOiAnRG9jdW1lbnRhdGlvbnMgb2YgQHRhaXl1dWtpL3V0aWxzJyxcclxuICBiYXNlOicvJyxcclxuICBvdXREaXI6IFwiLi9kaXN0L2RvY1wiLFxyXG4gIHRoZW1lQ29uZmlnOiB7XHJcbiAgLy8gaHR0cHM6Ly92aXRlcHJlc3MuZGV2L3JlZmVyZW5jZS9kZWZhdWx0LXRoZW1lLWNvbmZpZ1xyXG4gICAgICBuYXY6IFtcclxuICAgICAgICAgIHsgdGV4dDogJ1x1NEUzQlx1OTg3NScsIGxpbms6ICcvaW5kZXguaHRtbCcgfSxcclxuICAgICAgICAgIHsgdGV4dDogJ0FQSScsIGxpbms6ICcvZXRjL2RvYy9pbmRleC5odG1sJyB9LFxyXG4gICAgICBdLFxyXG5cclxuICAgICAgc2lkZWJhcjogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHRleHQ6ICdBUEknLFxyXG4gICAgICAgICAgICAgIGl0ZW1zOiBkb2NzLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgXSxcclxuXHJcbiAgICAgIHNvY2lhbExpbmtzOiBbXHJcbiAgICAgICAgICB7IGljb246ICdnaXRodWInLCBsaW5rOiAnaHR0cHM6Ly9naXRodWIuY29tL3RhaXl1dWtpL3V0aWxzJyB9LC8vIFx1OEZEOVx1OTFDQ1x1ODk4MVx1NjZGRlx1NjM2Mlx1NjIxMFx1NEY2MFx1ODFFQVx1NURGMVx1NzY4NFx1NEVEM1x1NUU5M1x1NTczMFx1NTc0MFxyXG4gICAgICBdLFxyXG5cclxuICAgICAgc2VhcmNoOiB7XHJcbiAgICAgICAgICBwcm92aWRlcjogJ2xvY2FsJ1xyXG4gICAgICB9LFxyXG4gICAgICBmb290ZXI6IHtcclxuICAgICAgICBtZXNzYWdlOiAnUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLicsXHJcbiAgICAgICAgY29weXJpZ2h0OiAnQ29weXJpZ2h0IFx1MDBBOSAyMDIzLXByZXNlbnQgQW5saWp1bidcclxuICAgICAgfVxyXG4gIH0sXHJcbiAgbWFya2Rvd246IHtcclxuICAgICAgdGhlbWU6IHtcclxuICAgICAgICAgIGxpZ2h0OiAnbGlnaHQtcGx1cycsXHJcbiAgICAgICAgICBkYXJrOiAnZ2l0aHViLWRhcmsnLFxyXG4gICAgICB9LFxyXG4gIH0sXHJcbn0pXHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQW9YLFNBQVMs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
